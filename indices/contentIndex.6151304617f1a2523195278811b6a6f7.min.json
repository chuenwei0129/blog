{"/":{"title":"我的个人知识库","content":"\n\u003e ❤️ 没有经过整理的知识才是徒然浪费时间，伤透脑筋！\n\n对于所有的问题，我都希望得到一个很漂亮的回答, **一个让人一眼看过去就茅塞顿开的回答**。实际上这是很难的。就好比人们总是希望一句话就说清楚生活的意义是什么。实际上也是很难的。\n\n**怀揣着这种不确定感继续学习，不要有知识包袱，不要假装自己很聪明**。这个世界本身就是抽象又复杂的，这没什么大不了。\n\n## 文具永远不嫌多的差生\n\n\u003e 折腾工具而不干活就是感觉很爽\n\n- [[VSCode 因为插件丰富、功能强大被大家喜欢，真是令人烦恼啊]]\n- [[怕遗忘 Git 的我，把相关知识点都记录下来就对了]]\n- [[最傻逼的用户，被 MacOS 百般折磨后，努力至今终尝回报，突然得到了最强使用技巧]]\n- [[呼呼…Windows 酱…抱歉了呢…我可能回不去了……能够出生，并与你相遇，真是太好了]]\n- [[只用命令行就能覆盖所有操作而且能提升工作效率的使用技巧你喜欢吗]]\n- [[关于我破解了 Switch 并且装满了游戏依然吃灰这件事]]\n- [[content/notes/date]]\n\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\n[notes/VSCode 因为插件丰富、功能强大被大家喜欢，真是令人烦恼啊]: \u003cnotes/VSCode 因为插件丰富、功能强大被大家喜欢，真是令人烦恼啊.md\u003e \"VSCode 因为插件丰富、功能强大被大家喜欢，真是令人烦恼啊\"\n[怕遗忘 Git 的我，把相关知识点都记录下来就对了]: \u003cnotes/怕遗忘 Git 的我，把相关知识点都记录下来就对了.md\u003e \"怕遗忘 Git 的我，把相关知识点都记录下来就对了\"\n[notes/最傻逼的用户，被 MacOS 百般折磨后，努力至今终尝回报，突然得到了最强使用技巧]: \u003cnotes/最傻逼的用户，被 MacOS 百般折磨后，努力至今终尝回报，突然得到了最强使用技巧.md\u003e \"最傻逼的用户，被 MacOS 百般折磨后，努力至今终尝回报，突然得到了最强使用技巧\"\n[notes/呼呼…Windows 酱…抱歉了呢…我可能回不去了……能够出生，并与你相遇，真是太好了]: \u003cnotes/呼呼…Windows 酱…抱歉了呢…我可能回不去了……能够出生，并与你相遇，真是太好了.md\u003e \"Windows\"\n[notes/只用命令行就能覆盖所有操作而且能提升工作效率的使用技巧你喜欢吗]: notes/只用命令行就能覆盖所有操作而且能提升工作效率的使用技巧你喜欢吗.md \"只用命令行就能覆盖所有操作而且能提升工作效率的使用技巧你喜欢吗\"\n[notes/关于我破解了 Switch 并且装满了游戏依然吃灰这件事]: \u003cnotes/关于我破解了 Switch 并且装满了游戏依然吃灰这件事.md\u003e \"Switch\"\n[content/notes/date]: notes/date.md \"Test\"\n[//end]: # \"Autogenerated link references\"\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/atoms/Todo-Tree-%E6%89%A9%E5%B1%95%E8%AE%BE%E7%BD%AE":{"title":"Todo Tree 扩展设置","content":"\n## 自定义图标\n\n\u003e icon - used to set a different icon in the tree view. Must be a valid octicon (see \u003chttps://octicons.github.com\u003e) or codicon (see \u003chttps://microsoft.github.io/vscode-codicons/dist/codicon.html\u003e). If using codicons, specify them in the format \"$(icon)\".The icon defaults to a tick if it's not valid. You can also use \"todo-tree\", or \"todo-tree-filled\" if you want to use the icon from the activity view.\n\n## 自定义高亮\n\n```json\n\"todo-tree.highlights.defaultHighlight\": {\n    \"icon\": \"alert\",\n    \"type\": \"text\",\n    \"foreground\": \"red\",\n    \"background\": \"white\",\n    \"opacity\": 50,\n    \"iconColour\": \"blue\"\n},\n\"todo-tree.highlights.customHighlight\": {\n    \"TODO\": {\n        \"icon\": \"check\",\n        \"type\": \"line\"\n    },\n    \"FIXME\": {\n        \"foreground\": \"black\",\n        \"iconColour\": \"yellow\",\n        \"gutterIcon\": true\n    },\n    \"TIPS\": {\n        \"icon\": \"zap\",\n        \"iconColour\": \"#00ffaa\",\n        \"gutterIcon\": true,\n        \"foreground\": \"#33ff00\",\n        \"background\": \"#ffffff\",\n        \"type\": \"text\"\n    },\n}\n```\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/atoms/VSCode-%E5%8E%9F%E7%94%9F%E9%AB%98%E6%80%A7%E8%83%BD%E6%8B%AC%E5%8F%B7%E7%9D%80%E8%89%B2%E6%97%A0%E7%BC%9D%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88":{"title":"VSCode 原生高性能括号着色无缝迁移方案","content":"\nVSCode 在最新的 v1.60 版本中原生支持了**高性能**的多层级括号对着色。\n\n\u003e We implemented this feature to address performance issues of the famous [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2) extension by [CoenraadS](https://github.com/CoenraadS).\n\n多层级括号对着色说明：[High performance bracket pair colorization](https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization)\n\n可以通过设置 `editor.bracketPairColorization.enabled: true` 启用括号对着色。所有颜色都可主题化，最多可配置六种颜色。\n\n```json\n\"editor.bracketPairColorization.enabled\": true,\n\"workbench.colorCustomizations\": {\n  \"editorBracketHighlight.foreground1\": \"#ffd700\",\n  \"editorBracketHighlight.foreground2\": \"#da70d6\",\n  \"editorBracketHighlight.foreground3\": \"#87cefa\",\n  \"editorBracketHighlight.foreground4\": \"#ffd700\",\n  \"editorBracketHighlight.foreground5\": \"#da70d6\",\n  \"editorBracketHighlight.foreground6\": \"#87cefa\",\n  \"editorBracketHighlight.unexpectedBracket.foreground\": \"#ff0000\"\n},\n```\n\n\u003e VSCode 还专门写了博文说介绍他们内置 `Bracket pair colorization` 功能所做的工作：\u003chttps://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization\u003e\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/atoms/VSCode-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2":{"title":"VSCode 自定义主题配色","content":"\n\n## 选择主题插件\n\n\u003e 先选择一款别人制作好的。然后在这基础上，自己再做细节的微调。\n\n在 `Extensions` 里面搜索关键字 `theme` ，一个个试，寻找自己看的最顺眼的插件。\n\n这里以一个名为 `Github Plus Theme` 的主题演示。\n\n把它安装起来，下面就以它为基础，进行界面的定制。\n\nMac 中 VSCode 插件都是安装在 `/Users/{用户名}/.vscode/extensions/` 目录中的。\n\n## 定制主题插件\n\nVSCode 的界面配色分为两部分：\n\n- 工作台配色（Workbench colors），也就是非代码的界面配色。\n- 语法配色（Syntax colors），也就是代码配色。\n\n这 2 种配色的定制，都是通过修改配置文件 `settings.json` 来实现的。\n\n\u003e **注意：** 有两个 `settings.json` 文件，user 和 workspace。\n\n前者是当前用户所有项目的公共配置，后者是当前项目的配置。\n\n建议**修改当前的项目配置**，这样不影响其他项目。\n\n### 工作台定制配色\n\n打开 workspace 的 `settings.json` 文件，我们可以添加如下的一些配置项：\n\n```json\n\"workbench.colorCustomizations\": {\n  \"[GitHub Plus]\": {\n    // activity bar\n    \"activityBar.border\": \"#e9e1e1\",\n    \"activityBar.background\": \"#104057\",\n    \"activityBar.foreground\": \"#dd447e\",\n    \"activityBar.inactiveForeground\": \"#6cb8db\",\n    \"activityBarBadge.background\": \"#d73a49\",\n    // sideBar bar\n    \"sideBar.border\": \"#e7e4e4\",\n    \"sideBar.background\": \"#ffffff\",\n    \"sideBar.foreground\": \"#000000\",\n    \"sideBarSectionHeader.background\": \"#ffffff\",\n    \"sideBarSectionHeader.border\": \"#e1e1e6\",\n    // others\n    \"editorLineNumber.foreground\": \"#4d5f3c\",\n    \"editorIndentGuide.background\": \"#e0d6d6\",\n    \"editorIndentGuide.activeBackground\": \"#ddbebe\",\n  }\n}\n```\n\n所有的配置项 👉 [官方文档](https://code.visualstudio.com/api/references/theme-color)\n\n### 代码定制配色\n\n点击打开 workspace 的 `settings.json` 文件，我们可以添加如下的一些配置项：\n\n```json\n\"editor.tokenColorCustomizations\": {\n  \"[GitHub Plus]\": {\n    \"comments\" : {\"foreground\": \"#8a9b99\"},\n    \"numbers\": {\n      \"foreground\": \"#296fb6\",\n      \"fontStyle\": \"bold\"\n    },\n    \"textMateRules\": [\n      {\n        \"scope\": [\n          \"entity.name.type.class\",\n          \"entity.other.inherited-class\"\n        ],\n        \"settings\": {\n            \"foreground\": \"#296fb6\",\n            \"fontStyle\": \"bold\"\n        }\n      },\n      {\n        \"scope\": [\n            \"meta.definition.method\"\n        ],\n        \"settings\": {\n            \"foreground\": \"#2871bb\",\n            \"fontStyle\": \"underline\"\n        }\n      },\n      {\n          \"scope\": [\n            \"meta.object-literal.key\",\n            \"variable.other.property\"\n          ],\n          \"settings\": {\n              \"foreground\": \"#296fb6\",\n          }\n      },\n      {\n          \"scope\": [\n            \"variable.parameter\"\n          ],\n          \"settings\": {\n              \"foreground\": \"#b629a3\",\n              \"fontStyle\": \"italic\"\n          }\n      },\n      {\n          \"scope\": [\n            // \"variable.parameter\",\n            \"variable.other.readwrite\",\n            \"meta.arrow.js\"\n          ],\n          \"settings\": {\n              \"foreground\": \"#06172b\"\n          }\n      },\n      {\n          \"scope\": [\n              \"meta.function-call\",\n              \"entity.name.function\"\n          ],\n          \"settings\": {\n              \"foreground\": \"#2871bb\"\n          }\n      }\n    ]\n  }\n}\n```\n\n配置方法目前支持：\n\n- 直接写配置（simple mode）\n\n  ```json\n  \"comments\" : {\"foreground\": \"#8a9b99\"},\n  \"numbers\": {\n    \"foreground\": \"#296fb6\",\n    \"fontStyle\": \"bold\"\n  }\n  ```\n\n- 使用 textMateRules 指定 scope 和配色\n\n  输入命令：`Inspect editor`，打开 `scope inspector` 查看某个代码元素是什么 `scope`，如下所示：\n\n  ![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/tut_20200611224023_15.png)\n\n  指定的 `scope` 越小，优先级越高。\n\n配色的配置目前支持两项：\n\n- foreground 颜色\n- fontStyle 字体\n\n详细的说明 👉 [官方文档](https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide)\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/atoms/VSCode-REST-Client-%E6%8F%92%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3":{"title":"VSCode REST Client 插件测试接口","content":"\n```sh\n# 获取 users 数据\nGET http://127.0.0.1:3000/users\n\n# id 比较特殊\n# 第一种方法：获取 users 属性当中 id 为 2 的数据\nGET http://127.0.0.1:3000/users/2\n# 第二种方法：获取 users 属性当中 id 为 3 的数据\nGET http://127.0.0.1:3000/users?id=3\n\n# 单条件查找：获取 users 属性 sex 为 男 的数据\nGET http://127.0.0.1:3000/users?sex=男\n# 多条件查找：获取 users 属性 sex 为 男 的数据，年龄 18 的数据\nGET http://127.0.0.1:3000/users?sex=男\u0026age=18\n\n# q 全局搜索（模糊查询）：查询 users 所有属性值中包含喝的数据\nGET http://127.0.0.1:3000/users?q=喝\n\n# 可以用 . 访问更深层的属性：查询 users 属性 address 的属性 region 为 华南 的数据\nGET http://127.0.0.1:3000/users?address.region=华南\n\n# 通过  _limit=5 截取前 5 条记录, 实现对数据的分页：将 users 每页显示 5 条记录，_page=1 查询第 1 页内容\nGET http://127.0.0.1:3000/users?_limit=5\u0026_page=1\n\n# 通过 _sort 与 _order 对数据进行排序。 _sort 指定排序的属性，_order 指定排序的类型（asc为升序，desc为降序）\nGET http://127.0.0.1:3000/users?_sort=age\u0026_order=asc\n# 多条件排序：年龄相同按 id 的升序排列：\nGET http://127.0.0.1:3000/users?_sort=age,id\u0026_order=desc,asc\n\n# 通过_start、_end、_limit 对数据进行截取。\n# 截取 [0, 3) 的记录，从 0 开始计数\nGET http://127.0.0.1:3000/users?_start=0\u0026_end=3\n# 从第 2 条记录开始截取 5 条记录\nGET http://127.0.0.1:3000/users?_start=1\u0026_limit=5\n\n# 通过操作符 _gte（大于等于）， _lte（小于等于）, _ne（不等于）, _like（模糊查询）获得数据\nGET http://127.0.0.1:3000/users?age_gte=20\n\n# json-server id 默认会自动生成自增 id，可以不传\n# application/x-www-form-urlencoded 格式传参\nPOST http://127.0.0.1:3000/users\nContent-Type: application/x-www-form-urlencoded\n\nname=小明\u0026age=18\n\n# Content-Type: application/json 格式传参\nPOST http://127.0.0.1:3000/users\nContent-Type: application/json\n\n{\n  \"name\": \"小明\",\n  \"age\": 18\n}\n\n# 删除 id 为 11 的数据\nDELETE http://127.0.0.1:3000/users/11\n\n# 通过 patch 请求，将 id 为 8 的 user 属性 name 修改为张八\n# patch 为局部修改\nPATCH http://127.0.0.1:3000/users/8\nContent-Type: application/json\n\n{\n  \"name\": \"张八\"\n}\n```\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/git/git":{"title":"","content":"# 怕遗忘 Git 的我，把相关知识点都记录下来就对了\n\n## Git 配置 SSH\n\n\u003e [[git-ssh]]\n\n## Git 的工作区域\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/613861755_1618028580119_014AA794B8DE2B0593F9F6C4BE7243D9.png)\n\n- **Workspace**：工作区，就是平时进行开发改动的地方，是当前看到最新的内容，在开发的过程也就是对工作区的操作。\n\n  \u003e Git 可以把工作区中的文件处理、压缩成一个提交对象，也能将取得的提交对象解包成文件同步到工作区中。\n\n- **Stage / Index**：暂存区，当执行 `git add` 的命令后，工作区的文件就会被移入暂存区，暂存区标记了当前工作区中那些内容是被 Git 管理的，当完成某个需求或者功能后需要提交代码，第一步就是通过 `git add` 先提交到暂存区。\n\n  \u003e Git 把它作为工作区与提交历史之间的中间区域，方便我们对提交内容进行组织：我们可能会在工作区同时更改多个完全不相干的文件，这时可以将它们分别放入暂存区，并在不同的提交中加入提交历史。此外暂存区还用于合并冲突时存放文件的不同版本。\n  \u003e\n  \u003e 除非是一个刚刚初始化的 Git 仓库，否则暂存区并不是空的，它会填充最近一次提交所对应的文件快照，因此当我们基于最近一次提交在工作区做了一些修改之后，git status 会将工作区的文件与暂存区的文件快照进行对比， 并提示我们有哪些做了修改的文件尚未加入暂存区。\n\n- **Repository**：本地仓库，位于自己的电脑上，通过 `git commit` 提交暂存区的内容，会进入本地仓库。\n\n- **Remote**：远程仓库，用来托管代码的服务器，远程仓库的内容能够被分布在多个地点的处于协作关系的本地仓库修改，本地仓库修改完代码后通过 `git push` 命令同步代码到远程仓库。\n\n## Index 文件\n\n暂存区并不像工作区有可见的文件系统目录，或者像提交历史一样通过 `.git/objects` 目录保存着所有提交对象，它没有实际存在的目录或文件夹，它的实体是位于 .git 目录的 index 文件。 index 是一个二进制文件，包含着一个由路径名称、权限和 blob 对象的 SHA-1 值组成的有序列表。\n\n我们可以通过 `git ls-files` 命令查看 index 中的内容：\n\n```sh\ngit ls-files --stage\n```\n\n```sh\n100644 67045665db202cf951f839a5f3e73efdcfd45021 0 .gitignore\n100644 fdddb29aa445bf3d6a5d843d6dd77e10a9f99657 0 LICENSE\n100644 da4a4b16b47061a625e8b977a1d7a490982ff75e 0 README.md\n100644 984d0d5b2df5ecbb33a45fa601c6750b445a3385 0 index.js\n```\n\nindex 中记录了暂存区文件的路径名称和 SHA-1 ID，文件内容已经作为 blob 对象保存到了 .git/objects 目录中：\n\n```sh\ntree .git/objects -L 2\n```\n\n```sh\n.git/objects\n├── 09\n│   └── 8749da09bbdb571aa42c4f2c5162aaf3249161\n├── 0a\n│   └── 90005e3d4013c11f5c3b24124badec7da55fcf\n\n......................\n\n├── fd\n│   └── ddb29aa445bf3d6a5d843d6dd77e10a9f99657\n├── info\n└── pack\n\n31 directories, 32 files\n```\n\nblob 对象是 Git 用来保存文件数据的二进制对象，我们可以通过 ID 取得对应的 blob 对象，用 `git cat-file` 命令打印其内容：\n\n```sh\ngit cat-file -p 984d0d5b2df5ecbb33a45fa601c6750b445a3385\n```\n\n输出 index.js 内容：\n\n```js\nconsole.log('Hello World')\n```\n\n当我们将一个修改过的文件加入暂存区后，如果又在工作区对文件进行了新的修改，需要重新将其加入暂存区，因为暂存区以 blob 对象保存的只是文件加入时的内容。\n\n**在 index 文件中，还记录了每一个文件的创建时间和最后修改时间等元信息，它通过引用实际的数据对象包含了一份完整的文件快照，因此可以通过对比 SHA-1 校验和实现与工作区文件之间的快速比较。**\n\n## [提交历史](#目录)\n\n提交历史是工作区文件在不同时间的文件快照（快照即文件或文件夹在特定时间点的状态，包括内容和元信息）。\n\n我们可以通过 `git log` 命令查看当前分支的提交历史\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220402-pld.png)\n\nGit 通过「提交对象」来储存每一次提交。这个 ID 是以对象内容进行 SHA-1 计算得到的哈希值，不同的内容一定会得到不同的结果，**Git 既把它作为每一个对象（不仅仅是提交对象）的唯一标识符，也用作 `.git/objects` 目录中的地址（其中存储着实际的二进制文件）**，我们可以用 ID 找到对应的对象并打印其内容：\n\n```sh\ngit cat-file -p 50fd80a\n```\n\n```sh\ntree 0a90005e3d4013c11f5c3b24124badec7da55fcf\nparent 8f23070fc78bf1b8a081c0b28beac3e7f3f9f019\nauthor chuenwei0129 \u003cchuenwei0129@gmail.com\u003e 1648891715 +0800\ncommitter chuenwei0129 \u003cchuenwei0129@gmail.com\u003e 1648891715 +0800\n\nrevert 第一次提交\n```\n\n这个提交对象的内容包含三部分：\n\n- 对应的 tree 对象的 ID\n- 父提交对象的 ID\n- 作者、提交者及提交信息等元信息\n\ntree 对象主要由其他 tree 对象和 blob 对象的 ID 以及路径名称组成：\n\n```sh\ngit ls-tree 0a90005e3d4013c11f5c3b24124badec7da55fcf\n```\n\n```sh\n100644 blob 67045665db202cf951f839a5f3e73efdcfd45021 .gitignore\n100644 blob fdddb29aa445bf3d6a5d843d6dd77e10a9f99657 LICENSE\n100644 blob da4a4b16b47061a625e8b977a1d7a490982ff75e README.md\n100644 blob ccd0f2ff642e953d8ee04e98a62f8ad8167d05a8 index.js\n```\n\n就像目录递归地包含其他目录和文件一样，一个 tree 对象即可表示整个工作区中所有已提交目录及文件的内容，也就是说提交历史中的每一个提交都包含着一份完整的某一时刻的文件快照，并通过保存上一次提交的引用形成连续的文件快照历史。\n\n## [工作流程](#目录)\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/git-three-trees.png)\n\n1. 假设我们进入到一个新目录，其中有一个 README 文件。此时暂存区为空，提交历史为空，HEAD 引用指向未创建的 master 分支。\n\n1. 现在我们想提交该文件，首先需要通过 `git add` 将其添加到暂存区。此时 Git 将在 .git/objects 目录中以该文件的内容生成一个 blob 对象，并将 blob 对象的信息添加到 .git/index 文件中。\n\n1. 接着运行 `git commit` ，它会取得暂存区中的内容生成一个 tree 对象，该 tree 对象即为工作区文件的永久快照，然后创建一个指向该 tree 对象的提交对象，最后更新 master 指向本次提交。\n\n1. 假如我们在工作区编辑了文件，Git 会将其与暂存区现有文件快照进行比较，在 `git add` 了更改的文件后，根据文件当前内容生成新的 blob 对象并更新 .git/index 文件中的引用 ID。git commit 的过程与之前类似，但是新的提交对象会以 HEAD 引用指向的提交作为父提交，然后更新其引用的 master 指向新创建的提交。\n\n1. 当我们 `git checkout` 一个分支或提交时，它会修改 HEAD 指向新的分支引用或提交，将暂存区填充为该次提交的文件快照，然后将暂存区的内容解包复制到工作区中。\n\n## [Git 基本操作](#目录)\n\n### 配置命令\n\n```sh\n# 列出当前配置\ngit config --list\n# 列出本地 Repository 配置\ngit config --local --list\n# 列出全局配置\ngit config --global --list\n# 列出系统配置\ngit config --system --list\n```\n\n### 把 Git 的默认分支 master 修改成 main\n\n#### 把默认分支改为 main\n\n```sh\ngit config --global init.defaultBranch main\n```\n\n#### 修改已创建项目的主分支为 main\n\n```sh\n# 把当前master分支改名为main, 其中-M的意思是移动或者重命名当前分支\ngit branch -M main\n```\n\n### 初始化仓库及操作\n\n```sh\n# 初始化一个仓库\ngit init\n# 添加文件到暂存区，后面可以跟多个文件，以空格区分\ngit add [文件名]\n# 添加当前更改的所有文件到暂存区\ngit add .\n# 提交暂存的更改，会新开编辑器进行编辑\ngit commit\n# 提交暂存的更改，并记录下备注\ngit commit -m [关于本次提交的相关说明]\n# 等同于 git add . \u0026\u0026 git commit -m\ngit commit -am [关于本次提交的相关说明]\n# 查看文件状态\ngit status\n# 如果文件改变，比较工作区两个文件内容\ngit diff\n# 比较 stage 的文件的差异，此时文件已经添加到 stage 了\ngit diff --staged\n# 显示所有提交过的版本信息，不包括已经被删除的 commit 记录和 reset 的操作\ngit log\n# 显示所有的操作记录，包括提交，回退的操作。一般用来找出操作记录中的版本号，进行回退\ngit reflog\n# 软重置，只会删除基于当前 commit id 之后的 commit 信息，但相应的文件修改并没有重置\ngit reset [commit id]\n# 回到 commit id 对应的版本\ngit reset --hard [commit id]\n# 返回到前 N 个版本\ngit reset --hard head~[N]\n# 返回到上一个 commit\ngit reset --hard head^\n# 把本地仓库和远程仓库关联\ngit remote add [远程仓库名] [远程仓库地址]\n# 删除远程仓库\ngit remote rm [远程仓库名]\n# 查看远程仓储名称\ngit remote -v\n# 从远程仓库拉取代码并合并到本地，可简写为 git pull 等同于 git fetch \u0026\u0026 git merge\ngit pull \u003c远程主机名\u003e \u003c远程分支名\u003e:\u003c本地分支名\u003e\n# 获取远程仓库特定分支的本地备份更新\ngit fetch \u003c远程主机名\u003e \u003c分支名\u003e\n# 当你想将某个远程分支的内容取回到本地下某个分支的话\ngit fetch origin \u003cbranch-name\u003e:\u003clocal-branch-name\u003e\n# 获取远程仓库所有分支的更新\ngit fetch --all\n# 查看本地分支\ngit branch\n# 查看远程分支\ngit branch -r\n# 查看本地和远程分支\ngit branch -a\n# 创建并切换到新建分支\ngit checkout -b \u003cbranch-name\u003e\n# 创建并切换到指定分支（ -C 大小写皆可）\ngit switch -C \u003cnew-branch\u003e\n# 从当前分支，切换到其他分支\ngit switch \u003cbranch-name\u003e\n# 与 switch 命令相同\ngit checkout \u003cbranch-name\u003e\n# 删除分支\ngit branch -d \u003cbranch-name\u003e\n# 删除远程分支\ngit push origin -d \u003cbranch-name\u003e\n# 当前分支与指定分支合并\ngit merge \u003cbranch-name\u003e\n# 查看哪些分支已经合并到当前分支\ngit branch --merged\n# 重命名分支\ngit branch -m \u003cold-branch-name\u003e \u003cnew-branch-name\u003e\n# 如果当前分支与多个主机存在追踪关系，那么这个时候 -u 选项会指定一个默认主机，这样后面就可以不加任何参数使用 git push\ngit push -u origin main\n# 如果当前分支只有一个追踪分支，那么主机名都可以省略\ngit push\n# 将当前分支推送到 origin 主机的对应分支，如果上游没有就会新建分支\ngit push origin develop\n# 删除远程分支\ngit push origin -d \u003cbranch-name\u003e\n# 结果类似于 git reset --hard \u003ccommit-id\u003e 但是它不会重置提交历史，而是对此操作重新 commit 一个消息，对 revert 对应的 commit-id 重新 revert 会回到没有 revert 的状态\ngit revert \u003ccommit-id\u003e\n```\n\n### git status\n\n通常我们需要查看一个文件的状态\n\n```sh\ngit status\n```\n\n- `Changes not staged for commit`\n\n  表示得大概就是工作区有该内容，但是缓存区没有，需要我们 git add\n\n- `Changes to be committed`\n\n  一般而言，这个时候，文件放在缓存区了，我们需要 git commit\n\n- `nothing to commit, working tree clean`\n\n  这个时候，我们将本地的代码推送到远端即可\n\n### 修改提交信息\n\n有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令来重新提交：\n\n```sh\ngit commit --amend\n```\n\n这个命令会将暂存区中的文件提交。如果自上次提交以来你还未做任何修改（**例如，在上次提交后马上执行了此命令**）， 那么快照会保持不变，而你所修改的只是提交信息。\n\n文本编辑器启动后，可以看到之前的提交信息。 编辑后保存会覆盖原来的提交信息。\n\n例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n\n```sh\ngit commit -m 'initial commit'\ngit add forgotten_file\ngit commit --amend\n```\n\n最终你只会有一个提交——第二次提交将代替第一次提交的结果。\n\n### 撤销修改\n\n```sh\ngit checkout -- [文件名]\n```\n\n说明: 把文件在**工作区**的修改全部撤销，这里有两种情况：\n\n- 一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n- 一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n总之，就是撤销当前**工作区**的修改\n\n\u003e 不带路径的 `git checkout [commit or branch]` 用于「检出」某个提交或分支，检出可以理解为「拿出来查看」。\n\u003e\n\u003e **若工作区与暂存区存在未提交的本地更改，checkout 还会尝试将文件快照与本地更改做简单的合并，若合并失败，将会中止操作并恢复到 checkout 之前的状态。** 因此 checkout 对工作区是安全的，它不会丢弃工作区所做的更改。\n\n### git pull\n\n#### git pull 命令的原理\n\n`git fetch` 会查询 git remote 中所有的远程仓库所包含分支的最新提交，并将其记录到 **.git/FETCH_HEAD** 文件中。\n\n**.git/FETCH_HEAD** 是一个版本链接，指向着目前已经从远程仓库取下来的所有分支的最新提交。\n\n`git pull` 命令等价于：先执行 `git fetch`，再执行 `git merge FETCH_HEAD` 将远程仓库对应分支的最新提交合并到当前本地分支中。\n\n#### git pull 命令中各选项的含义\n\n其中 `git pull` 有这几项常见的选项搭配：\n\n- 不带任何选项的 `git pull` 命令：先尝试快进合并，如果不行再进行正常合并生成一个新的提交。\n- `git pull --ff-only` 命令：只尝试快进合并，如果不行则终止当前合并操作。\n- `git pull --no-ff` 命令：禁止快进合并，即不管能不能快进合并，最后都会进行正常合并生成一个新的提交。\n- `git pull --rebase` 命令：先尝试快进合并，如果不行再进行变基合并。\n\n### 合并两个默认情况下没有共同基础的分支\n\n\u003e **I always see this error if when I create a new Github repository with a README.md, then pull it to a local repository at the first time.**\n\n```sh\ngit pull origin \u003cbranch-name\u003e --allow-unrelated-histories\n```\n\n\u003e \"git merge\" used to allow merging two branches that have no common base by default, which led to a brand new history of an existing project created and then get pulled by an unsuspecting maintainer, which allowed an unnecessary parallel history merged into the existing project. The command has been taught not to allow this by default, with an escape hatch --allow-unrelated-histories option to be used in a rare event that merges histories of two projects that started their lives independently.\n\n### 不建议在没有为偏离分支指定合并策略时执行 pull 操作\n\n当使用 Git 版本为 2.27.0 以上时，使用 `git pull` 命令出现以下的警告：\n\n```sh\nwarning: Pulling without specifying how to reconcile divergent branches is\ndiscouraged. You can squelch this message by running one of the following\ncommands sometime before your next pull:\n\n  git config pull.rebase false  # merge (the default strategy)\n  git config pull.rebase true   # rebase\n  git config pull.ff only       # fast-forward only\n\nYou can replace \"git config\" with \"git config --global\" to set a default\npreference for all repositories. You can also pass --rebase, --no-rebase,\nor --ff-only on the command line to override the configured default per\ninvocation.\n```\n\n该警告的中文版本文案描述如下：\n\n```sh\nwarning: 不建议在没有为偏离分支指定合并策略时执行pull操作。\n您可以在执行下一次pull操作之前执行下面一条命令来抑制本消息：\n\ngit config pull.rebase false  # 合并（默认缺省策略）\ngit config pull.rebase true   # 变基\ngit config pull.ff only       # 仅快进\n\n您可以将 \"git config\" 替换为 \"git config --global\" 以便为所有仓库设置\n缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，\n或者 --ff-only 参数覆盖缺省设置。\n```\n\n**首先理解什么是偏离分支**：\n\n当本地的分支落后于远程分支时，本地分支又自行修改项目文件生成了新的提交，这时本地分支再执行 `git pull` 命令就不能快进合并，并且还容易发生冲突。这时的本地分支便称为偏离分支，因为这时的本地分支的最新提交跟远程分支的最新提交不同，产生了偏离。\n\n**接着理解什么是合并策略**：\n\n合并策略便是 `git merge --ff-only`、`git merge --no-ff`、`git merge --rebase` 这三种常见的合并策略，分别代表着快进合并、非快进普通合并、变基合并。\n\n而我们执行不带任何选项的 `git pull` 命令时，Git 就不知道我们到底想用哪种合并策略来执行 `git pull`，因此 Git 会给出上述的警告文案，建议我们通过`git config` 命令应该按照这三种合并策略的哪种来执行。\n\n**解决问题**：\n\n- 保持当前的默认合并策略：`git config pull.rebase false`，\n因为 `pull.ff` 默认是没有指定的，而没有指定的 `pull.ff` 的默认值与显式指定为 `false` 的效果一致。\n- `git pull` 时只接受快进合并和变基合并：`git config pull.ff only`，保证每次执行不带选项的 `git pull` 时要么快进合并成功，要么快进合并失败。如果快进合并失败，再显式执行 `git pull --rebase` 进行变基合并即可。\n\n### git switch\n\n`git switch` 命令专门用于切换分支，可以用来替代 `checkout` 的部分用途。\n\n**创建并切换到指定分支（ -C 大小写皆可）**：\n\n```sh\ngit switch -C \u003cnew-branch\u003e\n```\n\n切换到已有分支：\n\n```sh\ngit switch \u003cbranch\u003e\n```\n\n和 `checkout` 一样，`switch` 对工作区是安全的，它会尝试合并工作区和暂存区中的本地更改，如果无法完成合并则会中止操作，本地更改会被保留。\n\n`switch` 的使用方式简单且专一，它无法像 `checkout` 一样对指定提交使用：\n\n```sh\ngit switch ea4c48a\n```\n\nfatal: 期望一个分支，得到提交 'ea4c48a'\n\n### git reset\n\n`git reset` 的主要作用是将 HEAD 重置为指定的提交，有 -—soft、--mixed、--hard 三种主要的命令选项。\n\n- `--soft` 只会对提交历史进行重置，不会再对暂存区以及工作区进行任何更改。\n\n- `--mixed` 选项是 `git reset` 它除了重置提交历史，还会更新暂存区，例如暂存区有未提交的文件，工作区又对文件做了修改，他会直接把暂存区的修改丢掉。\n\n- `--hard` 是 reset 最直接、最危险以及最常用的选项。它除了重置提交历史，工作区和暂存区中所有未提交的更改都会永久丢失，但被重置的提交仍有办法找回。\n\n另一个关于 reset 的实践是，不要在公共分支上执行 reset。公共分支是指你与其他团队成员协作开发的分支。如果你需要修复一个公共提交引入的问题，请使用专门为此目的设计的 `git revert`。\n\n### git restore\n\n`restore` 命令用于还原工作区或暂存区中的指定文件或文件集合：\n\n```sh\n# 撤销工作区的修改\ngit restore [文件名] #同 git checkout -- [文件名] 同价\n# 撤销暂存区的修改\ngit restore [文件名] --staged\n```\n\n### git stage\n\n添加文件到暂存区\n\n\u003e git 的 add，是一个容易引起疑问的命令。同时，`git diff --cached` 是比较 stage 的文件的差异的，也是一个不直观的命令。\n\ngithub 2008 年的 blog 中，也提到，容易引起混淆：\n\n\u003e things like making use of the term ‘stage’ for things that happen in the index (such as using ‘git diff —staged’ instead of ‘git diff —cached’) is being worked on. I’m excited that staging files may soon be done via ‘git stage’ rather-than/in-addition-to ‘git add’. This is nice for new users who often have a hard time seeing why you have to keep ‘git add’ing to stage your changes.\n\n事实上，在 git 的后续版本中，就做了两个修改：\n\n`git stage` 作为 `git add` 的一个同义词\n\n`git diff --staged` 作为 `git diff --cached` 的相同命令\n\n为了容易理解，推荐大家使用 `git stage` 和 `git diff --staged` 这两个命令，而 `git add` 和 `git diff --cached` 这两个命令，仅仅为了保持和以前的兼容做保留。\n\n### git rebase\n\n#### git rebase 作用于分支合并\n\n\u003e rebase 翻译为变基，他的作用和 merge 很相似，用于把一个分支的修改合并到当前分支上。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/b169721a6bfc42a7b4754f7c5d65672d_tplv-k3u1fbpfcp-zoom-in-crop-mark_1304_0_0_0.webp)\n\n#### git rebase 交互模式\n\n在开发中，常会遇到在一个分支上产生了很多的无效的提交，这种情况下使用 rebase 的交互式模式可以把已经发生的多次提交压缩成一次提交，得到了一个干净的提交历史，例如某个分支的提交历史情况如下：\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-147.png)\n\n进入交互式模式的方式是执行：\n\n```sh\ngit rebase -i \u003cbase-commit\u003e\n```\n\n参数 `base-commit` 就是指明操作的基点提交对象，基于这个基点进行 `rebase` 的操作，对于上述提交历史的例子，我们要把最后的一个提交对象（ 8061e866 ）之前的提交压缩成一次提交，我们需要执行的命令格式是：\n\n```sh\ngit rebase -i 8061e866\n```\n\n\u003e TIPS：有时候 `git rebase -i --root` 会很有用\n\n此时会进入一个 vim 的交互式页面，编辑器列出的信息像下列这样。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-1c4.png)\n\n想要合并这一堆更改，我们要使用 Squash 策略进行合并，即把当前的 commit 和它的上一个 commit 内容进行合并， 大概可以表示为下面这样，在交互模式的 rebase 下，至少保留一个 pick，否则命令会执行失败。\n\n修改文件后 按下 : 然后 wq 保存退出，此时又会弹出一个编辑页面，这个页面是用来编辑提交的信息，修改为 feat: 变基，最后保存一下\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-1be.png)\n\n\u003e 特别注意，只能在自己使用的 feature 分支上进行 rebase 操作，不允许在集成分支上进行 rebase，因为这种操作会修改集成分支的历史记录。\n\n#### git merge 和 git rebase 的区别\n\n不同于 `git rebase` 的是，`git merge` 在不是 fast-forward（快速合并）的情况下，会产生一条额外的合并记录，类似 `Merge branch 'xxx' into 'xxx'` 的一条提交信息。\n\n另外，在解决冲突的时候，用 merge 只需要解决一次冲突即可，简单粗暴，而用 rebase 的时候 ，需要依次解决每次的冲突，才可以提交。\n\n#### 解决 git rebase 操作后推送远端分支不成功的问题\n\n```sh\ngit push -f\n```\n\n### git cherry-pick\n\n`git cherry-pick` 可以理解为”挑拣”提交，和 merge 合并一个分支的所有提交不同的是，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用 `git cherry-pick` 了。\n\n一次转移多个提交：\n\n```sh\ngit cherry-pick commit1 commit2\n```\n\n上面的命令将 commit1 和 commit2 两个提交应用到当前分支。\n\n多个连续的 commit，也可区间复制：\n\n```sh\ngit cherry-pick commit1^..commit2\n```\n\n上面的命令将 commit1 到 commit2 这个区间的 commit 都应用到当前分支（包含commit1、commit2），commit1 是最早的提交。\n\n### git stash\n\n会有这么一个场景，现在你正在用你的 feature 分支上开发新功能。这时，生产环境上出现了一个 bug 需要紧急修复，但是你这部分代码还没开发完，不想提交，怎么办？这个时候可以用 `git stash` 命令先把工作区已经修改的文件暂存起来，然后切换到 hotfix 分支上进行 bug 的修复，修复完成后，切换回 feature 分支，从堆栈中恢复刚刚保存的内容。\n\n基本命令如下\n\n```sh\ngit stash #把本地的改动暂存起来\ngit stash save \"message\" # 执行存储时，添加备注，方便查找。\ngit stash pop # 应用最近一次暂存的修改，并删除暂存的记录\ngit stash apply  # 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num}\ngit stash list # 查看 stash 有哪些存储\ngit stash clear # 删除所有缓存的 stash\n```\n\n例如，我正在开发一个新功能，修改了 1.js 文件里的内容，\n\n还没开发完成，这个时候，我想切换到 hotfix 分支上修复 bug，得暂停下开发切换到 hotfix 分支，但是现在工作区还有内容，此时如果切换分支 Git 会报出下面的错误\n\n```sh\nerror: Your local changes to the following files would be overwritten by checkout:\n        1.js\nPlease commit your changes or stash them before you switch branches.\nAborting\n```\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-74s.png)\n\n上面那句话的意思就是说工作区有文件修改，不能提交，需要先进行 commit 或者 stash 操作，执行 git stash，结果如下\n\n```sh\nSaved working directory and index state WIP on stash: 22e561c feat: add 1.js\n```\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-76d.png)\n\n此时，我们的工作区已经干净了，可以切换到 hotfix 分支进行 bug 修复的工作，假设我们现在 bug 修复完成了，继续切回 feature 分支进行原本功能的开发，此时只需要执行 `git stash pop`，之前我们暂存的修改就会恢复到工作区，如下图所示\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-776.png)\n\n当我们想要暂存文件，切换分支做某些事的时候，可以用 `git stash` 这种机制帮助开发。\n\n\u003e 推荐在使用 stash 的相关命令时，每一次暂存的时候，不要直接使用 `git stash` 命令进行暂存下来，而是使用 `git stash save \"message...\"` 这种方式，给本次的提交做一个信息的记录。这样，想应用更改的时候，先通过 `git stash list` 查看一下所有的暂存列表。之后，推荐使用 `git stash apply stash@${num}` 的方式进行应用对应的 stash，这样不会清空已有的 stash 的列表项，并且能应用到当前的工作区，不需要这个暂存的话，再手动清除就可以了。\n\n### 配置 git alias 提升工作效率\n\n它的基本用法是 `git config --global alias.\u003c简化的字符\u003e 原始命令`\n\n```sh\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n\n# git config --global --unset alias.ci 取消别名\n```\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-7do.png)\n\n这些命令其实是更新你全局的 `.gitconfig` 文件，该文件用来保存全局的 git 配置，你可以直接 `code ~/.gitconfig` 手动添加\n\n```sh\n[alias]\nst = status -sb\nco = checkout\nbr = branch\nmg = merge\ncm = commit -m\nds = diff --staged\ndt = difftool\nmt = mergetool\nlast = log -1 HEAD\nlatest = for-each-ref --sort=-committerdate --format=\\\"%(committername)@%(refname:short) [%(committerdate:short)] %(contents)\\\"\nls = log --pretty=format:\\\"%C(yellow)%h %C(blue)%ad %C(red)%d %C(reset)%s %C(green)[%cn]\\\" --decorate --date=short\nhist = log --pretty=format:\\\"%C(yellow)%h %C(red)%d %C(reset)%s %C(green)[%an] %C(blue)%ad\\\" --topo-order --graph --date=short\ntype = cat-file -t\ndump = cat-file -p\nlg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit\n```\n\n## 参考资料\n\n- [git 工作原理与撤销操作图解](https://www.waynerv.com/posts/git-undo-intro/)\n- [为什么要先 git add 才能 git commit ？](https://www.zhihu.com/question/19946553)\n- [我在工作中是如何使用 Git 的](https://juejin.cn/post/6974184935804534815)\n- [高频 Git 面试题](https://zhuanlan.zhihu.com/p/101954895)\n- [Git refusing to merge unrelated histories on rebase](https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase)\n- [不建议在没有为偏离分支指定合并策略时执行pull 操作](https://blog.csdn.net/wq6ylg08/article/details/114106272)\n\n\u003c!--\n## Mac 中 Git 大小写问题的解决方案\n\n\u003e **Git 不会发现大小写的变化**\n\n使用 `git mv -f` 和 `mv` 同时更改文件名，避免本地文件系统与仓库中代码不一致。 --\u003e\n\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\n[git-ssh]: git-ssh.md \"Git 配置 SSH\"\n[//end]: # \"Autogenerated link references\"","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/git/git-cheatsheet":{"title":"","content":"# Git 高频操作\n\n| Command                                   | Action                                                                                                                                                                |\n| ----------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| git init                                  | 初始化 Git 仓库                                                                                                                                                       |\n| git add 文件名                            | 添加文件到暂存区，后面可以跟多个文件，以空格区分                                                                                                                      |\n| git add .                                 | 添加当前更改的所有文件到暂存区                                                                                                                                        |\n| git commit                                | 提交暂存的更改，会新开编辑器进行编辑                                                                                                                                  |\n| git commit -m \"关于本次提交的相关说明\"    | 提交暂存的更改，并记录下备注                                                                                                                                          |\n| git commit -am \"关于本次提交的相关说明\"   | 等同于 `git add .` \u0026\u0026 `git commit -m`                                                                                                                                 |\n| git status                                | 查看文件状态                                                                                                                                                          |\n| git diff                                  | 如果文件改变，比较工作区文件内容修改前后差异                                                                                                                          |\n| git diff --staged                         | 比较 stage 的文件的差异，此时文件已经添加到 stage 了                                                                                                                  |\n| git log                                   | 显示所有提交过的版本信息，不包括已经被删除的 commit 记录和 reset 的操作                                                                                               |\n| git reflog                                | 显示所有的操作记录，包括提交，回退的操作。一般用来找出操作记录中的版本号，进行回退                                                                                    |\n| git reset 版本号                          | 软重置，**只删除基于当前版本号之后的 commit 信息**，但相应的文件修改并没有重置                                                                                        |\n| git reset --hard 版本号                   | 回退到指定版本，版本号可以通过 `git reflog` 查看                                                                                                                      |\n| git reset --hard HEAD^                    | 回退到上一个版本                                                                                                                                                      |\n| git reset --hard HEAD~3                   | 回退到上三个版本                                                                                                                                                      |\n| git reset --hard origin/master            | 回退到远程仓库的 master 分支最新版本                                                                                                                                  |\n| git remote add 远程仓库名 远程仓库地址    | 把本地仓库和远程仓库关联，远程仓库名默认 origin                                                                                                                       |\n| git remote -v                             | 查看远程仓库信息                                                                                                                                                      |\n| git remote rm 远程仓库名                  | 删除远程仓库                                                                                                                                                          |\n| git push -u 远程仓库名 本地分支名         | 把本地分支推送到远程仓库，并且设置默认推送分支，如果当前分支与多个主机存在追踪关系，那么这个时候 `-u` 选项会指定一个默认主机，这样后面就可以不加任何参数使用 git push |\n| git push 远程仓库名 --delete 远程分支名   | 删除远程分支                                                                                                                                                          |\n| git push 远程仓库名 本地分支名:远程分支名 | 把本地分支推送到远程仓库，并且指定远程仓库的分支名，如果远程分支不存在，则会新建一个远程分支                                                                          |\n| git pull 远程仓库名 远程分支名            | 把远程仓库的分支拉取到本地仓库，`git pull` 等同于 `git fetch` \u0026\u0026 `git merge`                                                                                          |\n| git pull 远程仓库名 远程分支名:本地分支名 | 把远程仓库的分支拉取到本地仓库，并且指定本地仓库的分支名                                                                                                              |\n\n\u003c!-- ```js\n\n# 从远程仓库拉取代码并合并到本地，可简写为 \ngit pull \u003c远程主机名\u003e \u003c远程分支名\u003e:\u003c本地分支名\u003e\n# 获取远程仓库特定分支的本地备份更新\ngit fetch \u003c远程主机名\u003e \u003c分支名\u003e\n# 当你想将某个远程分支的内容取回到本地下某个分支的话\ngit fetch origin \u003cbranch-name\u003e:\u003clocal-branch-name\u003e\n# 获取远程仓库所有分支的更新\ngit fetch --all\n# 查看本地分支\ngit branch\n# 查看远程分支\ngit branch -r\n# 查看本地和远程分支\ngit branch -a\n# 创建并切换到新建分支\ngit checkout -b \u003cbranch-name\u003e\n# 创建并切换到指定分支（ -C 大小写皆可）\ngit switch -C \u003cnew-branch\u003e\n# 从当前分支，切换到其他分支\ngit switch \u003cbranch-name\u003e\n# 与 switch 命令相同\ngit checkout \u003cbranch-name\u003e\n# 删除分支\ngit branch -d \u003cbranch-name\u003e\n# 删除远程分支\ngit push origin -d \u003cbranch-name\u003e\n# 当前分支与指定分支合并\ngit merge \u003cbranch-name\u003e\n# 查看哪些分支已经合并到当前分支\ngit branch --merged\n# 重命名分支\ngit branch -m \u003cold-branch-name\u003e \u003cnew-branch-name\u003e\n# 如果当前分支与多个主机存在追踪关系，那么这个时候 -u 选项会指定一个默认主机，这样后面就可以不加任何参数使用 git push\ngit push -u origin main\n# 如果当前分支只有一个追踪分支，那么主机名都可以省略\ngit push\n# 将当前分支推送到 origin 主机的对应分支，如果上游没有就会新建分支\ngit push origin develop\n# 删除远程分支\ngit push origin -d \u003cbranch-name\u003e\n# 结果类似于 git reset --hard \u003ccommit-id\u003e 但是它不会重置提交历史，而是对此操作重新 commit 一个消息，对 revert 对应的 commit-id 重新 revert 会回到没有 revert 的状态\ngit revert \u003ccommit-id\u003e\n```\n\n\n| git status                                                     | 查看工作区状态                                   |\n| git diff \u003cfile\u003e                                                | 查看自己对文件做的修改                           |\n| git reset --hard \u003ccommit\\_id\u003e                                  | 修改文件版本                                     |\n| git log                                                        | 查看commit历史                                   |\n| git reflog                                                     | 查看命令历史                                     |\n| git checkout -- \u003cfile\u003e                                         | 撤销工作区的修改                                 |\n| git reset HEAD \u003cfile\u003e                                          | 撤销缓存区的修改                                 |\n| git rm \u003cfile\u003e + git commit - m \u003cmessage\u003e                       | 从版本库中删除文件                               |\n| git clone \u003curl\u003e                                                | 将url上的代码仓库clone下来                       |\n| git remote add origin git@\u003cserver-name\u003e:\u003cpath\u003e/\u003crepo-name.git\u003e | 关联一个远程库                                   |\n| git remote rm \u003cname\u003e                                           | 和远程库取消关联                                 |\n| git push -u origin \u003cname\u003e                                      | 第一次推送分支                                   |\n| git push origin \u003cname\u003e                                         | 推送分支                                         |\n| git branch                                                     | 查看分支                                         |\n| git branch \u003cname\u003e                                              | 创建分支                                         |\n| git checkout \u003cname\u003e 或 git switch \u003cname\u003e                       | 切换分支                                         |\n| git checkout -b \u003cname\u003e 或 git switch -c \u003cname\u003e                 | 创建 + 切换分支                                  |\n| git merge \u003cname\u003e                                               | 合并某分支到当前分支                             |\n| git branch -d \u003cname\u003e                                           | 删除合并过的分支                                 |\n| git branch -D \u003cname\u003e                                           | 强行删除未被合并过的分支                         |\n| git log --graph                                                | 查看分支合并图                                   |\n| git merge --no-ff \u003cname\u003e                                       | 不使用fast forward进行合并                       |\n| git branch --set-upstream-to \u003cbranch-name\u003e origin\u003cbranch-name\u003e | 将本地分支和远程分支建立链接                     |\n| git remote -v                                                  | 查看远程库信息                                   |\n| git pull                                                       | 从远程抓去分支                                   |\n| git fetch origin                                               | 获取服务器上的最新版本                           |\n| git checkout -b \u003cbranch-name\u003e origin/\u003cbranch-name\u003e             | 在本地创建和远程分支对应的分支                   |\n| git rebase                                                     | 将本地未push的分叉commit历史整理成直线           | --\u003e\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/git/git-config":{"title":"","content":"# git config\n\n## 常规操作\n\n```js\n// 列出当前配置\ngit config --list\n// 列出本地 Repository 配置\ngit config --local --list\n// 列出全局配置\ngit config --global --list\n// 列出系统配置\ngit config --system --list\n```\n\n## 把 Git 的默认分支 master 修改成 main\n\n### 把默认分支改为 main\n\n```sh\ngit config --global init.defaultBranch main\n```\n\n#### 修改已创建项目的主分支为 main\n\n```js\n// 把当前 master 分支改名为 main, 其中 -M 的意思是移动或者重命名当前分支\ngit branch -M main\n```\n\n## 配置 Git 的默认编辑器为 VSCode\n\n\u003e [[configure-git-default-editor-to-be-vscode]]\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/git/git-ssh":{"title":"","content":"# Git 配置 SSH\n\n虽然 Git 可以工作在 ssh 与 https 两种协议上，但为了安全性，更多时候会选择 ssh。\n\n## 生成一个 ssh-key\n\n执行命令\n\n```sh\nssh-keygen -t rsa -C \"example@qq.mail\"\n```\n\n- `-t`: 可选择 dsa | ecdsa | ed25519 | rsa | rsa1，代表加密方式\n- `-C`: 注释，一般写自己的邮箱\n\n如果执行成功，切换到 `~/.ssh` 目录下，此时目录应该如下所示。\n\n```sh\nauthorized_keys config id_rsa id_rsa.pub known_hosts\n```\n\n\u003e id_rsa / id_rsa.pub: 配对的私钥与公钥\n\n## 复制 `id_rsa.pub` 的内容\n\n以 Github 为例，进入 `settings -\u003e SSH and GPG keys` 通过 `cat` 命令查看文件 `id_rsa.pub` 的内容，然后复制过来，点击 `add ssh key`，这一步等于说把你的公钥放到了 Github 上进行托管。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/-k3u1fbpfcp.webp)\n\n## 全局配置 Git 的用户名和邮箱\n\n```sh\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xxx@xx.com\"\n```\n\n完成以上步骤，就可以愉快 pull 代码开发了。\n\n\u003e 和 https 拉取方式不同的是，https 方式需要每次提交前都手动输入用户名和密码，ssh 的方式配置完毕后 Git 都会使用你本地的私钥和远程仓库的公钥进行验证是否是一对秘钥，从而简化了操作流程。\n\n## No.1 的小秘籍\n\n### 查看是否有权限\n\n```sh\n# -v 详细展示链接过程\nssh -T git@github.com\n# Hi chuenwei0129! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n### 代理问题\n\n```sh\n# 这个提示是主要提示是不允许你代理这个 ip 登录 ssh\nkex_exchange_identification: Connection closed by remote host\nConnection closed by 127.0.0.1 port 7890\n```\n\n解决方案就是用 Github 的 443 端口 \u003chttps://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port\u003e 或者把代理关了\n\n更多讨论：[ssh远程登陆有时候正常，有时候显示：ssh_exchange_identification: Connection closed by remote host，这是什么原因？](https://www.zhihu.com/question/20023544)\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/git/git-stash":{"title":"","content":"# git stash\n\n会有这么一个场景，现在你正在用你的 feature 分支上开发新功能。这时，生产环境上出现了一个 bug 需要紧急修复，但是你这部分代码还没开发完，不想提交，怎么办？这个时候可以用 `git stash` 命令先把工作区已经修改的文件暂存起来，然后切换到 hotfix 分支上进行 bug 的修复，修复完成后，切换回 feature 分支，从堆栈中恢复刚刚保存的内容。\n\n基本命令如下\n\n```sh\ngit stash #把本地的改动暂存起来\ngit stash save \"message\" # 执行存储时，添加备注，方便查找。\ngit stash pop # 应用最近一次暂存的修改，并删除暂存的记录\ngit stash apply  # 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num}\ngit stash list # 查看 stash 有哪些存储\ngit stash clear # 删除所有缓存的 stash\n```\n\n例如，我正在开发一个新功能，修改了 1.js 文件里的内容，\n\n还没开发完成，这个时候，我想切换到 hotfix 分支上修复 bug，得暂停下开发切换到 hotfix 分支，但是现在工作区还有内容，此时如果切换分支 Git 会报出下面的错误\n\n```sh\nerror: Your local changes to the following files would be overwritten by checkout:\n        1.js\nPlease commit your changes or stash them before you switch branches.\nAborting\n```\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-74s.png)\n\n上面那句话的意思就是说工作区有文件修改，不能提交，需要先进行 commit 或者 stash 操作，执行 git stash，结果如下\n\n```sh\nSaved working directory and index state WIP on stash: 22e561c feat: add 1.js\n```\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-76d.png)\n\n此时，我们的工作区已经干净了，可以切换到 hotfix 分支进行 bug 修复的工作，假设我们现在 bug 修复完成了，继续切回 feature 分支进行原本功能的开发，此时只需要执行 `git stash pop`，之前我们暂存的修改就会恢复到工作区，如下图所示\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220403-776.png)\n\n当我们想要暂存文件，切换分支做某些事的时候，可以用 `git stash` 这种机制帮助开发。\n\n\u003e 推荐在使用 stash 的相关命令时，每一次暂存的时候，不要直接使用 `git stash` 命令进行暂存下来，而是使用 `git stash save \"message...\"` 这种方式，给本次的提交做一个信息的记录。这样，想应用更改的时候，先通过 `git stash list` 查看一下所有的暂存列表。之后，推荐使用 `git stash apply stash@${num}` 的方式进行应用对应的 stash，这样不会清空已有的 stash 的列表项，并且能应用到当前的工作区，不需要这个暂存的话，再手动清除就可以了。\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/journal/2022-10-27":{"title":"每日记录：2022 年 10 月 27 日 星期四","content":"\n## 今天的待办事项\n\n\u003e 安然无虞度过这一天\n\n## 今天学习了什么？\n\n## 有什么值得记录的吗？\n\n## 推迟到之后的内容\n\n\u003e 有时是会有这种事情发生的\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/journal/2022-10-28":{"title":"每日记录：2022 年 10 月 28 日 星期五","content":"\n## 今天的待办事项\n\n\u003e 安然无虞度过这一天\n\n## 今天学习了什么？\n\n## 有什么值得记录的吗？\n\n## 推迟到之后的内容\n\n\u003e 有时是会有这种事情发生的\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/notes/%E5%85%B3%E4%BA%8E%E6%88%91%E7%A0%B4%E8%A7%A3%E4%BA%86-Switch-%E5%B9%B6%E4%B8%94%E8%A3%85%E6%BB%A1%E4%BA%86%E6%B8%B8%E6%88%8F%E4%BE%9D%E7%84%B6%E5%90%83%E7%81%B0%E8%BF%99%E4%BB%B6%E4%BA%8B":{"title":"Switch","content":"\n# 关于我破解了 Switch 并且装满了游戏依然吃灰这件事\n\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/notes/%E5%8F%AA%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B0%B1%E8%83%BD%E8%A6%86%E7%9B%96%E6%89%80%E6%9C%89%E6%93%8D%E4%BD%9C%E8%80%8C%E4%B8%94%E8%83%BD%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BD%A0%E5%96%9C%E6%AC%A2%E5%90%97":{"title":"","content":"# 只用命令行就能覆盖所有操作而且能提升工作效率的使用技巧你喜欢吗\n\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/notes/%E5%91%BC%E5%91%BCWindows-%E9%85%B1%E6%8A%B1%E6%AD%89%E4%BA%86%E5%91%A2%E6%88%91%E5%8F%AF%E8%83%BD%E5%9B%9E%E4%B8%8D%E5%8E%BB%E4%BA%86%E8%83%BD%E5%A4%9F%E5%87%BA%E7%94%9F%E5%B9%B6%E4%B8%8E%E4%BD%A0%E7%9B%B8%E9%81%87%E7%9C%9F%E6%98%AF%E5%A4%AA%E5%A5%BD%E4%BA%86":{"title":"Windows","content":"\n# 呼呼...Windows 酱...抱歉了呢...我可能回不去了......能够出生，并与你相遇，真是太好了......\n\n## 二级标题\n\n正文\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/notes/%E6%80%95%E9%81%97%E5%BF%98-Git-%E7%9A%84%E6%88%91%E6%8A%8A%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E9%83%BD%E8%AE%B0%E5%BD%95%E4%B8%8B%E6%9D%A5%E5%B0%B1%E5%AF%B9%E4%BA%86":{"title":"","content":"# 怕遗忘 Git 的我，把相关知识点都记录下来就对了\n\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/notes/%E6%9C%80%E5%82%BB%E9%80%BC%E7%9A%84%E7%94%A8%E6%88%B7%E8%A2%AB-MacOS-%E7%99%BE%E8%88%AC%E6%8A%98%E7%A3%A8%E5%90%8E%E5%8A%AA%E5%8A%9B%E8%87%B3%E4%BB%8A%E7%BB%88%E5%B0%9D%E5%9B%9E%E6%8A%A5%E7%AA%81%E7%84%B6%E5%BE%97%E5%88%B0%E4%BA%86%E6%9C%80%E5%BC%BA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7":{"title":"","content":"# 最傻逼的用户，被 MacOS 百般折磨后，努力至今终尝回报，突然得到了最强使用技巧\n\n## 111\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/notes/VSCode-%E5%9B%A0%E4%B8%BA%E6%8F%92%E4%BB%B6%E4%B8%B0%E5%AF%8C%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E8%A2%AB%E5%A4%A7%E5%AE%B6%E5%96%9C%E6%AC%A2%E7%9C%9F%E6%98%AF%E4%BB%A4%E4%BA%BA%E7%83%A6%E6%81%BC%E5%95%8A":{"title":"VSCode 因为插件丰富、功能强大被大家喜欢，真是令人烦恼啊","content":"\n## 🎨 主题\n\n我最常用的 VSCode 主题是 [Vitesse](https://marketplace.visualstudio.com/items?itemName=antfu.theme-vitesse)，目前正在使用。\n\n![20221024174334](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024174334.png)\n\n⭐ 我之前使用过的其他一些主题：\n\n- [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) 👉 我使用 Github Light Default\n- [Aofuji Light Theme](https://marketplace.visualstudio.com/items?itemName=dsrkafuu.vscode-theme-aofuji) 👉 我使用 Oranji (No Italic)\n\n\u003e 拓展：[atoms/VSCode 自定义主题配色]\n\n## ✒ 字体\n\n对代码编辑器来说，另一个重要的事情是字体，我用于代码编辑器的字体是 [FiraCode](https://github.com/tonsky/FiraCode/releases/tag/6.2)。这是带有连字支持的免费字体。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/logo.svg)\n\n## 📁 图标\n\n文件图标增强了 VSCode 的外观，主要是它可以帮助我们通过给定的图标区分不同的文件和文件夹。对于我的 VSCode，我使用两个文件图标：\n\n- [file-icons](https://marketplace.visualstudio.com/items?itemName=file-icons.file-icons) - VSCode 最受欢迎的图标主题之一。\n- [Carbon Product Icons](https://marketplace.visualstudio.com/items?itemName=antfu.icons-carbon) - 目前正在使用。\n\n![20221024180447](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024180447.png)\n\n## 💻 扩展\n\n| 扩展                                                                                                                                                             | 功能                             | 备注                                            |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------- | ----------------------------------------------- |\n| [bracket-pair-colorizer-2](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)                                               | 彩虹🌈括号                        | [[atoms/VSCode 原生高性能括号着色无缝迁移方案]] |\n| [Todo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)                                                                           | 注释标签                         | [[atoms/Todo Tree 扩展设置]]                    |\n| [code-runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)                                                                     | 快速运行代码                     |                                                 |\n| [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)                                                  | 拼写检查                         |                                                 |\n| [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)                                                                             | 测试接口                         | [[atoms/VSCode REST Client 插件测试接口]]       |\n| [JSON5 syntax](https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-json5)                                                                          | 支持注释的 JSON                  |                                                 |\n| [Image preview](https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview)                                                         | 图片预览                         |                                                 |\n| [PicGo](https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo)                                                                                     | 图床工具                         | [[picgo-settings]]                              |\n| [Trailing Spaces](https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces)                                                                | 多余空格                         |                                                 |\n| [git-commit-plugin](https://marketplace.visualstudio.com/items?itemName=redjue.git-commit-plugin)                                                                | 自动生成 git 提交                |                                                 |\n| [JSON to TS](https://marketplace.visualstudio.com/items?itemName=MariusAlchimavicius.json-to-ts)                                                                 | 将 json 对象转换为 ts 接口       |                                                 |\n| [Error Lens](https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens)                                                                           | 更好的错误提示                   |                                                 |\n| [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)                                                             | 自动重命名配对的 `HTML/XML` 标签 | [[auto-rename-tag]]                             |\n| [Foam](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode)                                                                                     | 双链笔记                         | [[foam-guide]]                                  |\n| [CodeMetrics](https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-codemetrics)                                                              | 分析代码复杂度                   |                                                 |\n| [JavaScript and TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next)                                        | ts 最新版本支持                  |                                                 |\n| [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)                                                             | 图标主题                         |                                                 |\n| [indent-rainbow](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)                                                                     | 彩虹缩进                         |                                                 |\n| [dein Snippets Pack](https://marketplace.visualstudio.com/items?itemName=deinsoftware.dein-snippets-pack)                                                        | js 和 ts 代码片段                |                                                 |\n| [Markdown All in One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)                                                            | markdown 书写                    |                                                 |\n| [Markdown Preview Github Styling](https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles)                                    | Github 风格 Markdown 预览        |                                                 |\n| [markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)                                                               | markdown 格式检查                |                                                 |\n| [GitHub Copilot Nightly](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-nightly)                                                             | 明明你是 pilot，我才是 copilot   |                                                 |\n| [ES7+ React/Redux/React-Native snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)                                    | react 代码片段                   |                                                 |\n| [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)                                                                        | 包大小计算                       |                                                 |\n| [live server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)                                                                         | 本地服务器                       |                                                 |\n| [Mintlify Doc Writer for Python, JavaScript, TypeScript, C++, PHP, Java, C#, Ruby \u0026 more](https://marketplace.visualstudio.com/items?itemName=mintlify.document) | AI 注释                          |                                                 |\n\n## ✔ 使用技巧\n\n- [[useful-vscode-shortcuts]]\n- [[vscode-built-in-plugin-emmet]]\n- [[vscode-remote-ssh-config]]\n- [[vscode-snippets]]\n- [[configure-git-default-editor-to-be-vscode]]\n\n## ⚙️ 我的设置\n\n```json\n{\n  \"terminal.integrated.env.osx\": {\n    \"FIG_NEW_SESSION\": \"1\"\n  },\n  \"editor.inlineSuggest.enabled\": true,\n  \"window.commandCenter\": true,\n  \"editor.accessibilitySupport\": \"off\",\n  \"editor.tabSize\": 2,\n  \"editor.fontSize\": 13,\n  \"editor.lineHeight\": 24,\n  \"editor.fontFamily\": \"FiraCode, FiraCode Nerd Font, Menlo, Monaco, 'Courier New', monospace\",\n  \"editor.fontLigatures\": true,\n  \"editor.stickyTabStops\": true,\n  \"editor.bracketPairColorization.enabled\": true,\n  \"editor.guides.indentation\": true,\n  \"editor.guides.bracketPairs\": false,\n  \"editor.linkedEditing\": true,\n  \"editor.stickyScroll.enabled\": true,\n  /* ---------------- 格式化 start ---------------------- */\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.codeActionsOnSave\": {\n    // \"source.organizeImports\": true,\n    \"source.fixAll.eslint\": true\n  },\n  \"prettier.semi\": false,\n  \"prettier.singleQuote\": true,\n  \"files.insertFinalNewline\": true,\n  \"files.associations\": {\n    \"*.wxss\": \"css\",\n    \"*.json5\": \"json\",\n    \"*.cjson\": \"jsonc\",\n    \"*.wxs\": \"javascript\"\n  },\n  \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n  /* ---------------- 格式化 end ---------------------- */\n  \"emmet.includeLanguages\": {\n    \"vue-html\": \"html\",\n    \"javascript\": \"javascriptreact\"\n  },\n  // ****** 分隔符 ******\n  \"workbench.productIconTheme\": \"icons-carbon\",\n  \"workbench.iconTheme\": \"file-icons-colourless\",\n  \"workbench.colorTheme\": \"Vitesse Light\",\n  // 工作台配色，也就是非代码的界面配色。\n  \"workbench.colorCustomizations\": {\n    \"[Vitesse Light]\": {}\n  },\n  // 语法配色，也就是代码的配色。\n  \"editor.tokenColorCustomizations\": {\n    \"[Vitesse Light]\": {\n      // 直接写配置，比如下面的配置。\n      // \"comments\" : {\"foreground\": \"#061f1c\"},\n      // \"numbers\": {\n      //   \"foreground\": \"#296fb6\",\n      //   \"fontStyle\": \"bold\"\n      // },\n      // 使用 textMateRules 指定 scope 和配色\n      // 输入命令：Inspect editor，打开 scope inspector 查看某个代码元素是什么 scope。\n      // 指定的 scope越小，优先级越高。\n      \"textMateRules\": [\n        {\n          \"scope\": \"string.quoted.double.json.comments\",\n          \"settings\": {\n            \"foreground\": \"#5c6773\"\n          }\n        },\n        {\n          \"scope\": \"string.quoted.double.tsx\",\n          \"settings\": {\n            \"foreground\": \"#5c6773\"\n          }\n        }\n      ]\n    }\n  },\n  // ****** 分隔符 ******\n  \"[markdown]\": {\n    \"editor.defaultFormatter\": \"yzhang.markdown-all-in-one\",\n    \"editor.quickSuggestions\": {\n      \"comments\": \"on\",\n      \"strings\": \"on\",\n      \"other\": \"on\"\n    }\n  },\n  \"markdownlint.config\": {\n    \"default\": true,\n    // 第一行必须为一级标题\n    \"MD025\": false,\n    // 允许图片无名称\n    \"MD045\": false,\n    // 包含 html\n    \"MD033\": false,\n    \"MD047\": false,\n    \"MD053\": false\n  },\n  // ****** 分隔符 ******\n  \"git.autofetch\": true,\n  \"git.postCommitCommand\": \"push\",\n  \"gitlens.mode.active\": \"zen\",\n  \"gitlens.hovers.currentLine.over\": \"line\",\n  \"todo-tree.highlights.useColourScheme\": true,\n  \"todo-tree.regex.regexCaseSensitive\": false,\n  \"todo-tree.highlights.customHighlight\": {\n    \"TIPS\": {\n      \"icon\": \"zap\",\n      \"iconColour\": \"#00ffaa\",\n      \"gutterIcon\": true,\n      \"foreground\": \"#33ff00\",\n      \"background\": \"#ffffff\",\n      \"type\": \"text\"\n    }\n  },\n  \"todo-tree.general.tags\": [\n    \"BUG\",\n    \"HACK\",\n    \"FIXME\",\n    \"TODO\",\n    \"XXX\",\n    \"[ ]\",\n    \"[x]\",\n    \"TIPS\"\n  ],\n  \"picgo.configPath\": \"/Users/gakki/Library/Application Support/picgo/data.json\",\n  \"git.confirmSync\": false\n}\n```\n\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\n[atoms/VSCode 原生高性能括号着色无缝迁移方案]: \u003c../atoms/VSCode 原生高性能括号着色无缝迁移方案.md\u003e \"VSCode 原生高性能括号着色无缝迁移方案\"\n[atoms/Todo Tree 扩展设置]: \u003c../atoms/Todo Tree 扩展设置.md\u003e \"Todo Tree 扩展设置\"\n[atoms/VSCode REST Client 插件测试接口]: \u003c../atoms/VSCode REST Client 插件测试接口.md\u003e \"VSCode REST Client 插件测试接口\"\n[picgo-settings]: ../others/picgo-settings.md \"PicGo 图床设置\"\n[auto-rename-tag]: ../vscode/auto-rename-tag.md \"Auto Rename Tag\"\n[foam-guide]: ../vscode/foam-guide.md \"在 VSCode 中使用双链笔记\"\n[useful-vscode-shortcuts]: ../vscode/useful-vscode-shortcuts.md \"有用的 VSCode 快捷键\"\n[vscode-built-in-plugin-emmet]: ../vscode/vscode-built-in-plugin-emmet.md \"VSCode 内置插件 Emmet\"\n[vscode-remote-ssh-config]: ../vscode/vscode-remote-ssh-config.md \"VSCode Remote SSH 配置\"\n[vscode-snippets]: ../vscode/vscode-snippets.md \"VSCode 使用 Snippets 设置代码块\"\n[configure-git-default-editor-to-be-vscode]: ../vscode/configure-git-default-editor-to-be-vscode.md \"配置 Git 的默认编辑器为 VSCode\"\n[//end]: # \"Autogenerated link references\"\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/notes/date":{"title":"Test","content":"\n## Test\n\n\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/others/11":{"title":"","content":"# 每日记录：2022 年 10 月 26 日\n\n## 今天的待办事项\n\n\u003e 这条笔记创建于: 2022 年 10 月 26 日，星期三，19: 31。\n\n- [ ] 安然无虞度过这一天\n\n## 今天学习了什么\n\n\u003e 这条笔记更新于: 2022 年 十月 月 26 日，星期三，19: 31。\n\n- [ ] 今天学习了什么\n\n## 有什么值得记录的吗？\n\n### 寻章摘句\n\n### 我的眼睛是摄像头\n\n## 推迟到之后的内容\n\n\u003e 有时是会有这种事情发生的\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/others/Title-of-my-New-Note":{"title":"","content":"# 每日记录：2022 年 10 月 26 日\n\n## 今天的待办事项\n\n\u003e 这条笔记创建于: 2022 年 10 月 26 日，星期三，19: 31。\n\n- [ ] 安然无虞度过这一天\n\n## 今天学习了什么\n\n\u003e 这条笔记更新于: 2022 年 十月 月 26 日，星期三，19: 31。\n\n- [ ] 今天学习了什么\n\n## 有什么值得记录的吗？\n\n### 寻章摘句\n\n### 我的眼睛是摄像头\n\n## 推迟到之后的内容\n\n\u003e 有时是会有这种事情发生的\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/others/picgo-settings":{"title":"","content":"# PicGo 图床设置\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，20: 38。\n\n## Github 仓库设置\n\n首先你得有一个 GitHub 账号。\n\n### 1. 新建一个公共仓库\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/picgo/create_new_repo.png)\n\n记下你取的仓库名。\n\n### 2. 生成一个 token 用于 PicGo 操作你的仓库\n\n**访问：** \u003chttps://github.com/settings/tokens\u003e\n\n然后点击 `Generate new token`。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/picgo/generate_new_token.png)\n\n把 `repo` 的勾打上即可。然后翻到页面最底部，点击 `Generate token` 的绿色按钮生成`token`。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/picgo/generate_token_repo.png)\n\n**注意：** 这个 `token` 生成后只会显示一次！你要把这个 `token` 复制一下存到其他地方以备以后要用。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/picgo/copy_token.png)\n\n### 3. 配置 PicGo\n\n**注意：** 仓库名的格式是用户名/仓库，比如我创建了一个叫做 `test` 的仓库，在 PicGo 里我要设定的仓库名就是 `Molunerfinn/test`。一般我们选择 `main` 分支即可。然后记得点击确定以生效，然后可以点击**设为默认图床**来确保上传的图床是 GitHub。\n\n```js\n{\n  \"repo\": \"\", // 仓库名，格式是 username/reponame\n  \"token\": \"\", // github token\n  \"path\": \"\", // 自定义存储路径，比如 img/\n  \"customUrl\": \"\", // 自定义域名，注意要加 http:// 或者 https://\n  \"branch\": \"\" // 分支名，默认是 main\n}\n```\n\n至此配置完毕，已经可以使用了。当你上传的时候，你会发现你的仓库里也会增加新的图片了。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/picgo/success.png)\n\n**更多功能设置：** \u003chttps://picgo.github.io/PicGo-Doc/\u003e\n\n## vs-picgo 配置\n\n我的配置如图：\n\n![SCR-20221024-kwi](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/SCR-20221024-kwi.png)\n\n有关更多信息，请查看 [vs-picgo](https://github.com/PicGo/vs-picgo) 扩展页面。\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/others/publish-foam-notes-through-github-pages":{"title":"","content":"# 通过 Github Pages 发布 Foam 笔记\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，20: 38。\n\n## 配置\n\n\u003e 笔记库基于 [foam-template-gatsby-kb](https://github.com/hikerpig/foam-template-gatsby-kb) 模版创建，有关更多信息，请查看其 Github 仓库。\n\n配置模版中 [_layouts/gatsby-config.js](https://github.com/hikerpig/foam-template-gatsby-kb/blob/master/_layouts/gatsby-config.js) 文件。\n\n```js\nconst path = require('path')\n\nconst PATH_PREFIX = process.env.PATH_PREFIX\n\nmodule.exports = {\n  pathPrefix: PATH_PREFIX || `/`, // b. If you are using Netlify/Vercel, your can keep it this way\n  siteMetadata: {\n    // some SEO configs using by gatsby-theme-kb\n    title: `Foam`, // Replace it with your site's title\n    author: `Your Name`, // Replace it with your name\n    description: `My personal knowledge base`, // Replace it with your site's description\n  },\n  plugins: [\n    {\n      resolve: `gatsby-theme-kb`,\n      options: {\n        rootNote: '/readme',\n        contentPath: `${__dirname}/..`,\n        ignore: [\n          '**/_layouts/**',\n          '**/.git/**',\n          '**/.github/**',\n          '**/.vscode/**',\n          '**/.cache/**',\n        ],\n        // this is an option for extending `gatsby-plugin-mdx` options inside `gatsby-theme-kb`,\n        getPluginMdx(defaultPluginMdx) {\n          // so you can have your relative referenced files served, e.g. '../assets/img.png'.\n          defaultPluginMdx.options.gatsbyRemarkPlugins.push({\n            resolve: `gatsby-remark-copy-linked-files`,\n            options: {\n              ignoreFileExtensions: ['md', 'mdx'],\n            },\n          })\n\n          // an example of syntax highlighting\n          defaultPluginMdx.options.gatsbyRemarkPlugins.push({\n            resolve: 'gatsby-remark-prismjs',\n            options: {\n              noInlineHighlight: true,\n            },\n          })\n\n          // add math support\n          defaultPluginMdx.options.remarkPlugins.push(require('remark-math'))\n          if (!defaultPluginMdx.options.rehypePlugins) defaultPluginMdx.options.rehypePlugins = []\n          defaultPluginMdx.options.rehypePlugins.push(require('rehype-katex'))\n          return defaultPluginMdx\n        },\n      },\n    },\n    {\n      // this plugin makes sure your static files will be served by gatsby,\n      //   but of course you need to reference them by absolute path, e.g. '/assets/img.png'.\n      // if you have multiple directories, copy this plugin section and specify other directory\n      // check https://github.com/csath/gatsby-plugin-copy-files-enhanced to find docs for this plugin\n      resolve: 'gatsby-plugin-copy-files-enhanced',\n      options: {\n        source: path.resolve(__dirname, `../assets`),\n        destination: '/assets',\n        purge: false,\n      },\n    },\n  ],\n}\n```\n\n## 部署\n\n首先需要在 repo 设置中启用 GitHub Pages，将 `gh-pages` 分支设置为源。\n\n![20221024143942](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024143942.png)\n\n一旦你推送 `master` 分支，Github 操作将构建站点并将生成的文件添加到 `gh-pages` 分支。\n\n操作工作流配置位于 `.github/workflows/Deploy.yml`。\n\n构建完成后，可以访问站点 `https://{yourname}.github.io/{your-repo-name}/`，例如 \u003chttps://chuenwei0129.github.io/blog\u003e\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/others/switch":{"title":"","content":"# 关于我破解了 Switch 并且装满了游戏依然吃灰这件事\n\n\u003e 这条笔记创建于: 2022 年 10 月 25 日，星期二，13: 17。\n\n## SX OS 拥抱大气层\n\n[SX 完整拥抱大气层 图文教程](https://shipengliang.com/games/sx-%e5%ae%8c%e6%95%b4%e6%8b%a5%e6%8a%b1%e5%a4%a7%e6%b0%94%e5%b1%82-%e5%9b%be%e6%96%87%e6%95%99%e7%a8%8b.html)\n\n## USB 安装游戏\n\n1. Mac 下用 USB 连接 Switch 需要 [Android File Transfer](https://www.android.com/filetransfer/)\n\n2. [Switch DBI 图文使用教程](https://shipengliang.com/games/switch-dbi-%e5%9b%be%e6%96%87%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b.html)\n\n## 离线升降级系统\n\n\u003e [图解更新大气层文件和升级 Switch 系统方法](http://www.265xh.com/nszhinan/4464.html)\n\n1. 文件传输方式推荐参考：[Switch 大气层 Hekate 下的 USB 传输](https://shipengliang.com/games/switch-%e5%a4%a7%e6%b0%94%e5%b1%82-hekate%e4%b8%8b%e7%9a%84usb%e4%bc%a0%e8%be%93.html) 或用读卡器（DBI 不支持大气层核心文件传输）。\n2. 下载最新大气层整合包：[Atmosphere](https://github.com/AK478BB/AK-Atmosphere/releases) 并覆盖更新到 TF 卡根目录。\n3. 下载目标版本固件包：[Switch Firmware 固件](https://github.com/THZoria/NX_Firmware/releases)，并将固件包解压后传输到 TF 卡根目录。\n4. [启动系统后，进入相册，运行 Daybreak](https://shipengliang.com/games/switch-%e5%a4%a7%e6%b0%94%e5%b1%82-atmosphere-%e5%a6%82%e4%bd%95%e7%a6%bb%e7%ba%bf%e5%8d%87%e7%ba%a7%e7%b3%bb%e7%bb%9f.html)\n\n## 小插曲\n\nTX 拥抱大气层，使用 Mac 更新固件到 13.2.1 时，遇到报错\n\n```sh\n“failed to get update information, result: 0x00234a02”\n```\n\n经过 Google，在这个 [Error trying to update with Daybreak](https://gbatemp.net/threads/error-trying-to-update-with-daybreak.579036/) 讨论下的 [#17](https://gbatemp.net/threads/error-trying-to-update-with-daybreak.579036/#post-9299632) 得到了我们想要的答案。\n\n\u003e **问题及解决方案**（备份）\n\n如果你平常是用 PC 来管理 SD 卡中的内容，而当你某次把 SD 卡插入 Mac 中，再插回 NS 中，往往就会报错无法开机。其原因主要和 Archive Bit 有关。\n\n```sh\nSome of you have noticed, that thinks like Homebrew-Launcher and LayeredFS-Injects aren’t working as expected when using MacOS for SD-Card-Management.\n\nThe problem is, MacOS is setting an “archive flag” on every sd-card mounted and the switch won’t read that folders.\n```\n\n**步骤一**、删除 macOS 产生的垃圾\n\n在将 SD 卡插入 Mac，并复制、修改完文件后，macOS 系统会在 SD 卡内产生例如 .DS_Store 等垃圾文件，我们可以下载 [CleanEject](https://www.javawa.nl/cleaneject_en.html) 进行清理，会自动清理完并弹出 SD 卡。\n\n**步骤二**、修复 archive flag 问题\n\n其实这个功能在 Hekate 中就内置了，可以通过以下步骤来解决：\n\n如果你打开了自动进入虚拟系统（默认打开），则需要在启动时，看到开机 Logo 就按住 - 键，进入 Hekate 菜单\n选择 `Tools \u003e Arch bit • RCM • Touch • Partition \u003e Fix Archive Bit` 进行修复\n\n\u003e 解决方案来自：[如何优雅地在 macOS 上管理 NS](https://blog.dov.moe/posts/52726/)\n\n## 白嫖网站\n\n- \u003chttps://xxxxx520.com/\u003e\n\n\u003c!-- ## 模拟器 --\u003e\n\u003c!-- TODO --\u003e\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/auto-rename-tag":{"title":"","content":"# Auto Rename Tag\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，20: 39。\n\n## Extension\n\n- [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag) (3.3M downloads): “Automatically rename paired HTML/XML tag, same as Visual Studio IDE does.”\n\n## Setting\n\n- `Editor: Linked Editing`: “Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.” Default is `false`.\n\n\u003e Update 09/01/21 - `editor.renameOnType` is deprecated and is replaced by `editor.linkedEditing`.\n\nAuto-renaming is supported in HTML files only at the moment. There is an [open issue](https://github.com/microsoft/vscode/issues/85707) to add this for JSX files.\n\nThe Vetur extension has a [long-standing issue](https://github.com/vuejs/vetur/issues/565) open to add this.\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/configure-git-default-editor-to-be-vscode":{"title":"","content":"# 配置 Git 的默认编辑器为 VSCode\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，20: 37。\n\nGit 默认编辑器应该是 Vim，世界上最好的编辑器 🐶，不过最新版的 Git 安装时已经可以选择默认编辑器了。Vim 确实很强大，但对我来说可就要了亲命了，因为重度依赖 VSCode。\n\n**第一步**：确保你已经安装了 VSCode 并且配置了环境变量\n\n**第二步**：配置 core.editor 属性\n\n```sh\ngit config --global core.editor \"code --wait\"\n```\n\n执行上面的命令后就可以了。但是每次都是以新建一个 tab 页的方式打开编辑器，如果你希望每次都打开一个新窗口，那么就需要加上 --new-window 参数。\n\n```sh\ngit config --global core.editor \"code --wait --new-window\"\n```\n\n如果想恢复 Vim，使用下面命令即可\n\n```sh\ngit config --global --unset core.editor\n```\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/foam-guide":{"title":"","content":"# 在 VSCode 中使用双链笔记\n\n\u003e 这条笔记更新于: 2022 年 10 月 24 日，星期一，23: 34。\n\n## 配置笔记库\n\n### 在 GitHub 上建立笔记库\n\n使用 [foam-template-gatsby-kb](https://github.com/hikerpig/foam-template-gatsby-kb) 模版在自己的 GitHub 上建立仓库，可以选择是否将仓库设为私有库。仓库建立后，将其 clone 到本地并在 VSCode 中打开。这样以后就可以通过 GitHub 对你的笔记库进行版本控制，也可以通过 Github Pages 发布 Foam 笔记（[[publish-foam-notes-through-github-pages]]）。\n\n在 VSCode 中打开笔记库根目录后，软件会自动提示安装 Foam 和其他推荐的扩展，可以选择全部或按需安装。\n\n## 初步上手\n\n### 创建新的笔记\n\n要在 Foam 中创建新的笔记，可以使用快捷键 `Ctrl + Shift + P` 打开命令面板，输入并执行 `Foam: Create New Note` 命令，即可在当前文件夹下创建新的笔记文件（`.md` 格式）。当然也可以在侧边栏「资源管理器」面板或者通过快捷键 `Ctrl + N` 实现相应的功能。\n\n\u003e ⚠️ **需要注意的是，因为 Foam 本地化程度有限，不推荐使用中文的文件名，建议使用 `title-case-name` 格式。**\n\n### 创建双向链接\n\n在 Foam 中创建一个双向链接与在其他软件中无异，即使用 `[[]]` 符号。如果被 `[[]]` 包括的文本有对应的笔记，就会成为一个双向链接。当将鼠标移动并悬浮在文本上时，会显示这一条目的预览，可以按下 `Ctrl + 单击` 来打开这条笔记；如果没有对应的笔记，则会创建一个占位符，按下 `Ctrl + Click` 创建可以对应的条目。\n\nFoam 支持标题引用，使用方式为：`[[wikilink#heading]]`，这样便能引用对应条目中该标题下的内容。\n\n### 笔记元数据\n\n使用 Markdown 文档时，在笔记头部使用 YAML 语言格式的字段来定义这个文档的元数据是一个良好的习惯，Foam 也支持这一功能。其格式如下：\n\n```md\n---\ntitle: Title Case Name\ndate: yyyy-mm-dd\ntype: feature\ntags: tag1, tag2, tag3\n---\n```\n\ntitle 属性定义了这条笔记的标题和在知识图谱（Graph）上的名称（标识笔记时，优先级为：title 属性 \u003e 正文的一级标题 \u003e 笔记的文件名）。\n\ntags 属性定义这条笔记的标签。多个标签之间用空格或半角逗号分隔。另外也可以通过在笔记正文中使用 `#tag` 来添加标签。Foam 支持多级标签即 `#tag/sub-tag`。\n\ntype 属性可以用于在知识图谱中区分笔记的类型，可以将不同 type 属性的笔记用不同颜色表示。\n\n也可以自定义其他的属性，如：日期（date）、作者（author）、来源（source）等。\n\n### 知识图谱\n\n在命令面板执行 `Foam: Show Graph` 命令来打开 Foam 的知识图谱，还可以通过页面右上角的过滤控件进行图谱中显示的节点进行控制。同样支持缩放和拖拽等操作。\n\n![20221024193124](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024193124.png)\n\n### Daily Note\n\nFoam 支持快速记录 Daily Note。在命令面板执行 `Foam: Open Daily Note` 命令，即可创建或打开今日的 Daily Note。在此处可以记录今天的任务、灵感或其他想要记录的内容。Daily Note 格式可以通过模板功能自定义。\n\n在 Daily Note 笔记中，键入 `/` 会显示一些日期建议，通过这种方法可以快速插入指向指定日期的双向链接。\n\n![20221024133419](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024133419.png)\n\n### 侧边栏面板\n\n侧边栏面板包含这几项功能：文件管理、大纲、时间线、标签管理（Tag Explorer）、占位符（Placeholders）、孤立笔记（Orphans）和反向链接（Backlinks）\n\n## 使用代码片段和模板来提高效率\n\n### 代码片段的配置\n\nVSCode 支持用户自定义代码片段（参阅：[[vscode-snippets]])，因此这一功能也可以在 Foam 中使用。在 Foam 笔记库根目录下 **.vscode** 路径创建 `foam-snippets.code-snippets` 文件以创建用户片段（该文件本质上是一个 json 文件）。\n\n```json\n{\n  \"Metadata\": {\n    \"scope\": \"markdown\",\n    \"prefix\": \"/meta\",\n    \"description\": \"创建这条笔记的元数据\",\n    \"body\": [\n      \"---\",\n      \"title: $1\",\n      \"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE\",\n      \"type: ${2|生活,TODO,思考,知识|}\",\n      \"tags: $3\",\n      \"---\"\n    ]\n  },\n\n  \"Time Stamp\": {\n    \"scope\": \"markdown\",\n    \"prefix\": \"/time\",\n    \"description\": \"在此处插入一条时间戳\",\n    \"body\": [\n      \"这条笔记${1|创建,更新|}于: $CURRENT_YEAR 年 $CURRENT_MONTH 月 $CURRENT_DATE 日，$CURRENT_DAY_NAME，$CURRENT_HOUR: $CURRENT_MINUTE。\"\n    ]\n  },\n\n  \"Insert task list\": {\n    \"prefix\": \"/todo\",\n    \"body\": [\"- [${1| ,x|}] ${2:text}\", \"${0}\"],\n    \"description\": \"在此处插入一条待办事项\"\n  },\n\n  \"Insert table\": {\n    \"prefix\": \"/table\",\n    \"body\": [\n      \"| ${1:Column1}  | ${2:Column2}   | ${3:Column3}   |\",\n      \"|-------------- | -------------- | -------------- |\",\n      \"| ${4:Item1}    | ${5:Item1}     | ${6:Item1}     |\",\n      \"${0}\"\n    ],\n    \"description\": \"Insert table with 2 rows and 3 columns. First row is heading.\"\n  }\n}\n```\n\n### 创建和使用模板\n\n在 Foam 中也可以创建和使用模板。在命令面板执行 `Foam: Create New template` 命令即可创建模板，以 Daily Note 为例，在模板文件夹路径下创建 `daily-note.md` 文件，便可以开始自定义这一模板。我的 Daily Note 模板定义如下：\n\n```md\n---\ntitle: DaiLyNote-${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\ndate: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\ntype: 生活\ntags: 生活记录\n---\n\n# 每日记录：${CURRENT_YEAR} 年 ${CURRENT_MONTH} 月 ${CURRENT_DATE} 日\n\n## 今天的待办事项\n\n\u003e 这条笔记创建于: ${CURRENT_YEAR} 年 ${CURRENT_MONTH} 月 ${CURRENT_DATE} 日，${CURRENT_DAY_NAME}，${CURRENT_HOUR}: $CURRENT_MINUTE。\n\n- [ ] 安然无虞度过这一天\n- [ ] 安然无虞度过这一天\n\n## 今天学习了什么\n\n\u003e 这条笔记更新于: ${CURRENT_YEAR} 年 ${CURRENT_MONTH_NAME} 月 ${CURRENT_DATE} 日，${CURRENT_DAY_NAME}，${CURRENT_HOUR}: $CURRENT_MINUTE。\n\n写些什么...\n\n## 有什么值得记录的吗？\n\n写些什么...\n\n## 推迟到之后的内容\n\n\u003e 有时是会有这种事情发生的\n\n写些什么...\n```\n\n除此之外，Daily Note 的一些属性也可以在项目的配置文件中修改，如 Daily Note 的存放位置和文件名格式：\n\n```json\n\"foam.openDailyNote.directory\": \"journal\", // 默认存放在 journal 文件夹\n```\n\n## 常见问题\n\n### 插入图片?\n\n\u003e [[picgo-settings]]\n\n### 快捷键列表\n\n\u003e [[useful-vscode-shortcuts]]\n\n### 从网页捕获内容\n\n像其他笔记软件大多提供了剪辑网页内容的功能一样，Foam 也可以保存来自网页的内容：通过 [MarkDownload](https://github.com/deathau/markdownload) 这一浏览器扩展。MarkDownload 可以获取整个网页的主体文本、或只截取想要保存的文本为 Markdown 文件，并为其添加元数据。在扩展选项中可以调整元数据的格式为与 Foam 一致，从而无缝衔接 Foam 笔记库。\n\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\n[publish-foam-notes-through-github-pages]: ../others/publish-foam-notes-through-github-pages.md \"通过 Github Pages 发布 Foam 笔记\"\n[vscode-snippets]: vscode-snippets.md \"VSCode 使用 Snippets 设置代码块\"\n[picgo-settings]: ../others/picgo-settings.md \"PicGo 图床设置\"\n[useful-vscode-shortcuts]: useful-vscode-shortcuts.md \"有用的 VSCode 快捷键\"\n[//end]: # \"Autogenerated link references\"\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/my-vscode-config":{"title":"","content":"# VSCode 因为插件丰富、功能强大被大家喜欢，真是令人烦恼啊\n\n\u003e 这条笔记更新于: 2022 年 10 月 24 日，星期一，23: 03。\n\n## 🎨 主题\n\n我最常用的 VS Code 主题是 [Vitesse](https://marketplace.visualstudio.com/items?itemName=antfu.theme-vitesse)，目前正在使用。\n\n![20221024174334](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024174334.png)\n\n⭐ 我之前使用过的其他一些主题：\n\n- [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) - 我使用了 Github Light Default\n- [Aofuji Light Theme](https://marketplace.visualstudio.com/items?itemName=dsrkafuu.vscode-theme-aofuji) - 我使用了 Oranji (No Italic)\n\n\u003e 自定义主题配色：[[VSCode 自定义主题配色]]\n\n## ✒ 字体\n\n对代码编辑器来说，另一个重要的事情是字体，我用于代码编辑器的字体是 [FiraCode](https://github.com/tonsky/FiraCode/releases/tag/6.2)。这是带有连字支持的免费字体。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/logo.svg)\n\n## 📁 图标\n\n文件图标增强了 VSCode 的外观，主要是它可以帮助我们通过给定的图标区分不同的文件和文件夹。对于我的 VSCode，我使用两个文件图标：\n\n- [file-icons](https://marketplace.visualstudio.com/items?itemName=file-icons.file-icons) - VSCode 最受欢迎的图标主题之一。\n- [Carbon Product Icons](https://marketplace.visualstudio.com/items?itemName=antfu.icons-carbon) - 目前正在使用。\n\n![20221024180447](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024180447.png)\n\n## 💻 我使用的扩展\n\n| 扩展                                                                                                                                                             | 功能                             | 备注                                      |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------- | ----------------------------------------- |\n| [bracket-pair-colorizer-2](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)                                               | 彩虹🌈括号                        | [[VSCode 原生高性能括号着色无缝迁移方案]] |\n| [Todo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)                                                                           | 注释标签                         | [[todo-tree-config]]                      |\n| [code-runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)                                                                     | 快速运行代码                     |                                           |\n| [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)                                                  | 拼写检查                         |                                           |\n| [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)                                                                             | 测试接口                         | [[vscode-rest-client]]                    |\n| [JSON5 syntax](https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-json5)                                                                          | 支持注释的 JSON                  |                                           |\n| [Image preview](https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview)                                                         | 图片预览                         |                                           |\n| [PicGo](https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo)                                                                                     | 图床工具                         | [[picgo-settings]]                        |\n| [Trailing Spaces](https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces)                                                                | 多余空格                         |                                           |\n| [git-commit-plugin](https://marketplace.visualstudio.com/items?itemName=redjue.git-commit-plugin)                                                                | 自动生成 git 提交                |                                           |\n| [JSON to TS](https://marketplace.visualstudio.com/items?itemName=MariusAlchimavicius.json-to-ts)                                                                 | 将 json 对象转换为 ts 接口       |                                           |\n| [Error Lens](https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens)                                                                           | 更好的错误提示                   |                                           |\n| [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)                                                             | 自动重命名配对的 `HTML/XML` 标签 | [[auto-rename-tag]]                       |\n| [Foam](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode)                                                                                     | 双链笔记                         | [[foam-guide]]                            |\n| [CodeMetrics](https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-codemetrics)                                                              | 分析代码复杂度                   |                                           |\n| [JavaScript and TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next)                                        | ts 最新版本支持                  |                                           |\n| [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)                                                             | 图标主题                         |                                           |\n| [indent-rainbow](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)                                                                     | 彩虹缩进                         |                                           |\n| [dein Snippets Pack](https://marketplace.visualstudio.com/items?itemName=deinsoftware.dein-snippets-pack)                                                        | js 和 ts 代码片段                |                                           |\n| [Markdown All in One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)                                                            | markdown 书写                    |                                           |\n| [Markdown Preview Github Styling](https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles)                                    | Github 风格 Markdown 预览        |                                           |\n| [markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)                                                               | markdown 格式检查                |                                           |\n| [GitHub Copilot Nightly](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-nightly)                                                             | 明明你是 pilot，我才是 copilot   |                                           |\n| [ES7+ React/Redux/React-Native snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)                                    | react 代码片段                   |                                           |\n| [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)                                                                        | 包大小计算                       |                                           |\n| [live server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)                                                                         | 本地服务器                       |                                           |\n| [Mintlify Doc Writer for Python, JavaScript, TypeScript, C++, PHP, Java, C#, Ruby \u0026 more](https://marketplace.visualstudio.com/items?itemName=mintlify.document) | AI 注释                          |                                           |\n\n## ✔ 使用技巧\n\n- [[useful-vscode-shortcuts]]\n- [[vscode-built-in-plugin-emmet]]\n- [[vscode-remote-ssh-config]]\n- [[vscode-snippets]]\n- [[configure-git-default-editor-to-be-vscode]]\n\n## ⚙️ 我的设置\n\n```json\n{\n  \"terminal.integrated.env.osx\": {\n    \"FIG_NEW_SESSION\": \"1\"\n  },\n  \"editor.inlineSuggest.enabled\": true,\n  \"window.commandCenter\": true,\n  \"editor.accessibilitySupport\": \"off\",\n  \"editor.tabSize\": 2,\n  \"editor.fontSize\": 13,\n  \"editor.lineHeight\": 24,\n  \"editor.fontFamily\": \"FiraCode, FiraCode Nerd Font, Menlo, Monaco, 'Courier New', monospace\",\n  \"editor.fontLigatures\": true,\n  \"editor.stickyTabStops\": true,\n  \"editor.bracketPairColorization.enabled\": true,\n  \"editor.guides.indentation\": true,\n  \"editor.guides.bracketPairs\": false,\n  \"editor.linkedEditing\": true,\n  \"editor.stickyScroll.enabled\": true,\n  /* ---------------- 格式化 start ---------------------- */\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.codeActionsOnSave\": {\n    // \"source.organizeImports\": true,\n    \"source.fixAll.eslint\": true\n  },\n  \"prettier.semi\": false,\n  \"prettier.singleQuote\": true,\n  \"files.insertFinalNewline\": true,\n  \"files.associations\": {\n    \"*.wxss\": \"css\",\n    \"*.json5\": \"json\",\n    \"*.cjson\": \"jsonc\",\n    \"*.wxs\": \"javascript\"\n  },\n  \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n  /* ---------------- 格式化 end ---------------------- */\n  \"emmet.includeLanguages\": {\n    \"vue-html\": \"html\",\n    \"javascript\": \"javascriptreact\"\n  },\n  // ****** 分隔符 ******\n  \"workbench.productIconTheme\": \"icons-carbon\",\n  \"workbench.iconTheme\": \"file-icons-colourless\",\n  \"workbench.colorTheme\": \"Vitesse Light\",\n  // 工作台配色，也就是非代码的界面配色。\n  \"workbench.colorCustomizations\": {\n    \"[Vitesse Light]\": {}\n  },\n  // 语法配色，也就是代码的配色。\n  \"editor.tokenColorCustomizations\": {\n    \"[Vitesse Light]\": {\n      // 直接写配置，比如下面的配置。\n      // \"comments\" : {\"foreground\": \"#061f1c\"},\n      // \"numbers\": {\n      //   \"foreground\": \"#296fb6\",\n      //   \"fontStyle\": \"bold\"\n      // },\n      // 使用 textMateRules 指定 scope 和配色\n      // 输入命令：Inspect editor，打开 scope inspector 查看某个代码元素是什么 scope。\n      // 指定的 scope越小，优先级越高。\n      \"textMateRules\": [\n        {\n          \"scope\": \"string.quoted.double.json.comments\",\n          \"settings\": {\n            \"foreground\": \"#5c6773\"\n          }\n        },\n        {\n          \"scope\": \"string.quoted.double.tsx\",\n          \"settings\": {\n            \"foreground\": \"#5c6773\"\n          }\n        }\n      ]\n    }\n  },\n  // ****** 分隔符 ******\n  \"[markdown]\": {\n    \"editor.defaultFormatter\": \"yzhang.markdown-all-in-one\",\n    \"editor.quickSuggestions\": {\n      \"comments\": \"on\",\n      \"strings\": \"on\",\n      \"other\": \"on\"\n    }\n  },\n  \"markdownlint.config\": {\n    \"default\": true,\n    // 第一行必须为一级标题\n    \"MD025\": false,\n    // 允许图片无名称\n    \"MD045\": false,\n    // 包含 html\n    \"MD033\": false,\n    \"MD047\": false,\n    \"MD053\": false\n  },\n  // ****** 分隔符 ******\n  \"git.autofetch\": true,\n  \"git.postCommitCommand\": \"push\",\n  \"gitlens.mode.active\": \"zen\",\n  \"gitlens.hovers.currentLine.over\": \"line\",\n  \"todo-tree.highlights.useColourScheme\": true,\n  \"todo-tree.regex.regexCaseSensitive\": false,\n  \"todo-tree.highlights.customHighlight\": {\n    \"TIPS\": {\n      \"icon\": \"zap\",\n      \"iconColour\": \"#00ffaa\",\n      \"gutterIcon\": true,\n      \"foreground\": \"#33ff00\",\n      \"background\": \"#ffffff\",\n      \"type\": \"text\"\n    }\n  },\n  \"todo-tree.general.tags\": [\n    \"BUG\",\n    \"HACK\",\n    \"FIXME\",\n    \"TODO\",\n    \"XXX\",\n    \"[ ]\",\n    \"[x]\",\n    \"TIPS\"\n  ],\n  \"picgo.configPath\": \"/Users/gakki/Library/Application Support/picgo/data.json\",\n  \"git.confirmSync\": false\n}\n```\n\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\n[custom-vscode-theme-color-schemes]: custom-vscode-theme-color-schemes.md \"VSCode 定制主题配色\"\n[bracket-pair-colorizer-config]: bracket-pair-colorizer-config.md \"VSCode 原生高性能括号着色无缝迁移方案\"\n[todo-tree-config]: todo-tree-config.md \"Todo Tree 扩展配置\"\n[vscode-rest-client]: vscode-rest-client.md \"VSCode REST Client 插件测试接口\"\n[picgo-settings]: ../others/picgo-settings.md \"PicGo 图床设置\"\n[auto-rename-tag]: auto-rename-tag.md \"Auto Rename Tag\"\n[foam-guide]: foam-guide.md \"在 VSCode 中使用双链笔记\"\n[useful-vscode-shortcuts]: useful-vscode-shortcuts.md \"有用的 VSCode 快捷键\"\n[vscode-built-in-plugin-emmet]: vscode-built-in-plugin-emmet.md \"VSCode 内置插件 Emmet\"\n[vscode-remote-ssh-config]: vscode-remote-ssh-config.md \"VSCode Remote SSH 配置\"\n[vscode-snippets]: vscode-snippets.md \"VSCode 使用 Snippets 设置代码块\"\n[configure-git-default-editor-to-be-vscode]: configure-git-default-editor-to-be-vscode.md \"配置 Git 的默认编辑器为 VSCode\"\n[//end]: # \"Autogenerated link references\"\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/useful-vscode-shortcuts":{"title":"","content":"# 有用的 VSCode 快捷键\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，17: 19。\n\n## 通用快捷键\n\n`command + k` + `command + s` 打开键盘快捷方式，点击右上角三个点显示用户键盘绑定，对单个命令右键菜单可显示是否快捷键冲突\n\n- **`ctrl + R`：打开最近的项目**\n- `command + F`：搜索\n- `command + option + F`：替换\n- **`command + shift + F`：在项目内搜索**\n- `ctrl + G`：跳转到某行\n\n## 多光标编辑\n\n- 在上面添加光标：`option + command + ⬆️`\n- 在下面添加光标：`option + command + ⬇️`\n- 添加下一个匹配项：`command + D`\n- **选择所有匹配项：`command + shift + L`**\n\n切换为 `option + 单击` 进行多光标功能\n\n## 行操作\n\n- 向上复制一行：`option + shift + ⬆️`\n- 向下复制一行：`option + shift + ⬇️`\n- 向上移动一行：`option + ⬆️`\n- 向下移动一行：`option + ⬇️`\n- 光标到页面最底部：`command + ⬇️`\n\n## Foam 扩展快捷键\n\n![20221024151352](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024151352.png)\n\n## PicGo 扩展快捷键\n\n![20221024151714](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/20221024151714.png)\n\n## 待办事项快捷键\n\n`- [ ]` 当你的光标在这一行上时，你可以通过按 `Option`+`C` 将其标记为完成\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/vscode-built-in-plugin-emmet":{"title":"","content":"# VSCode 内置插件 Emmet\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，20: 36。\n\n## `^` 返回上层\n\n使用 `^` 运算符，可以爬上树的一个层次，并更改上下文\n\n```sh\ndiv+div\u003ep\u003espan+em^b\n```\n\n表现为：\n\n```html\n\u003cdiv\u003e\u003c/div\u003e\n\u003cdiv\u003e\n  \u003cp\u003e\u003cspan\u003e\u003c/span\u003e\u003cem\u003e\u003c/em\u003e\u003c/p\u003e\n  \u003cb\u003e\u003c/b\u003e\n\u003c/div\u003e\n```\n\n当然了，`^` 也可以多个并用，有几个 `^` 就返回几层\n\n```sh\ndiv+div\u003ep\u003espan+em^^bq\n```\n\n表现为：\n\n```html\n\u003cdiv\u003e\u003c/div\u003e\n\u003cdiv\u003e\n    \u003cp\u003e\u003cspan\u003e\u003c/span\u003e\u003cem\u003e\u003c/em\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cblockquote\u003e\u003c/blockquote\u003e\n```\n\n这里要注意，最多返回到跟第一个元素同级的，以上面的例子，`^^` 已经返回到了最外层，跟 `^^^` 的效果是一样的。\n\n## `()` 分组\n\n`()` 操作符对复杂的子元素进行分组，简而言之，每个 `()` 中都是一个独立的子元素\n\n适用于某个子元素比较复杂的情况\n\n```sh\n(div\u003edl\u003e(dt+dd)*3)+footer\u003ep\n```\n\n表现为：\n\n```html\n\u003cdiv\u003e\n    \u003cdl\u003e\n        \u003cdt\u003e\u003c/dt\u003e\n        \u003cdd\u003e\u003c/dd\u003e\n        \u003cdt\u003e\u003c/dt\u003e\n        \u003cdd\u003e\u003c/dd\u003e\n        \u003cdt\u003e\u003c/dt\u003e\n        \u003cdd\u003e\u003c/dd\u003e\n    \u003c/dl\u003e\n\u003c/div\u003e\n\u003cfooter\u003e\n    \u003cp\u003e\u003c/p\u003e\n\u003c/footer\u003e\n```\n\n使用分组后，可以用一个缩写来生成整个页面，不过不建议这么做。\n\n## 自定义属性(Custom attributes)\n\n可以使用类似 `CSS` 中的符号 `[attr=\"xxx\"]` 向元素添加自定义属性\n\n```sh\ndiv[title=\"Hello world!\" colspan=3]\n```\n\n表现为：\n\n```html\n\u003cdiv title=\"Hello world!\" colspan=\"3\"\u003e\u003c/div\u003e\n```\n\n需要说明的是：\n\n方括号内的属性数量不限，如果你喜欢，可以一直加\n\n如果不是默认属性值的话会生成插入占位 比如：`div[title colspan]` 会变成 `\u003cdiv title=\"\" colspan=\"\"\u003e` 前提是编辑器支持这样的写法\n\n属性值可以使用单引号或者双引号都可以，属性值如果不包含空格可以省去引号\n\n## `$` 编号(Item numbering)\n\n操作符可以生成重复元素，而 `$` 可以去元素进行编号。需要将 `$` 放在元素名、属性名或者属性值里\n\n```js\nul\u003eli.item$*5\n```\n\n表现为：\n\n```html\n\u003cul\u003e\n  \u003cli class=\"item1\"\u003e\u003c/li\u003e\n  \u003cli class=\"item2\"\u003e\u003c/li\u003e\n  \u003cli class=\"item3\"\u003e\u003c/li\u003e\n  \u003cli class=\"item4\"\u003e\u003c/li\u003e\n  \u003cli class=\"item5\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n如果想实现 `00x` 的格式，该怎么办呢？\n\n可以连写多个 `$` 就可以生成带有前导的编号了\n\n```js\nul\u003eli.item$$$*5\n```\n\n表现为：\n\n```html\n\u003cul\u003e\n  \u003cli class=\"item001\"\u003e\u003c/li\u003e\n  \u003cli class=\"item002\"\u003e\u003c/li\u003e\n  \u003cli class=\"item003\"\u003e\u003c/li\u003e\n  \u003cli class=\"item004\"\u003e\u003c/li\u003e\n  \u003cli class=\"item005\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n那如果我想实现降序呢？\n\n使用 `@` 修饰符，可以改变编号的方向以及起点\n\n```js\nul\u003eli.item$@-*5\n```\n\n理论上，应该表现为：\n\n```html\n\u003cul\u003e\n  \u003cli class=\"item5\"\u003e\u003c/li\u003e\n  \u003cli class=\"item4\"\u003e\u003c/li\u003e\n  \u003cli class=\"item3\"\u003e\u003c/li\u003e\n  \u003cli class=\"item2\"\u003e\u003c/li\u003e\n  \u003cli class=\"item1\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n如果想改变起点，不从 1 开始，可以使用 `@N` 放在 `$` 后面\n\n```js\nul\u003eli.item$@3*5\n```\n\n表现为：\n\n```html\n\u003cul\u003e\n  \u003cli class=\"item3\"\u003e\u003c/li\u003e\n  \u003cli class=\"item4\"\u003e\u003c/li\u003e\n  \u003cli class=\"item5\"\u003e\u003c/li\u003e\n  \u003cli class=\"item6\"\u003e\u003c/li\u003e\n  \u003cli class=\"item7\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n## 注意事项\n\n\u003e 以上所有的语法，都不能出现空格，除非是在特定的括号中。因为 Emmet 在遇到空格时，就认为已经结束，会停止解析。\n\n更多语法：\u003chttps://docs.emmet.io/cheat-sheet/\u003e\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/vscode-remote-ssh-config":{"title":"","content":"# VSCode Remote SSH 配置\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，20: 36。\n\n## 插件安装\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/v2-59303a4d9b36ff521a09bee473d95736_1440w.png)\n\n## Mac 本地创建密钥对配置 SSH\n\n### 本地客户端\n\n在用户主目录下，看看有没有 .ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳过。如果没有，打开 Shell，创建 SSH Key：\n\n```sh\nssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n然后一路回车，使用默认值即可，由于这个 Key 也不是用于军事目的，所以也无需设置密码。\n\n如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。\n\n### 远程服务端\n\n导入公钥到 Ubuntu 服务器\n\n- 这里测试用的服务器地址为：192.168.235.22\n- 用户为：root\n\n```sh\nssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.235.22\n```\n\n上面这条命令是写到服务器上的 ssh 目录下去了\n\n```sh\ncd ~/.ssh\nvim authorized_keys\n```\n\n可以看到客户端写入到服务器的 `id_rsa.pub`（公钥）内容。\n\n### VSCode 添加远程服务器配置\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/SCR-20220401-ff.png)\n\n使用第一步\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/ssh-host.jpg)\n\n使用第二步：进行服务器用户名 + ip 配置即可\n\n\u003e 配置代码大致如下\n\n```sh\n# Read more about SSH config files: https://linux.die.net/man/5/ssh_config\nHost 107 【随便起的名字】\n    HostName x.x.xx.com【IP】\n    User 用户名\n```\n\n## 腾讯云云服务器创建新密钥对（UI 操作）\n\n### 操作步骤\n\n1. [创建 SSH 密钥](#创建-ssh-密钥)。\n2. [将 SSH 密钥绑定云服务器](#密钥绑定解绑云服务器)。\n3. [使用 SSH 登录 Linux 实例](#使用-ssh-登录-linux-实例)。\n\n### 创建 SSH 密钥\n\n1. 登录 [云服务器控制台](https://console.cloud.tencent.com/cvm/)。\n2. 在左侧导航栏中，单击【[SSH 密钥](https://console.cloud.tencent.com/cvm/sshkey)】。\n3. 在 SSH 密钥管理页面，单击【创建密钥】。\n4. 在弹出的创建 SSH 密钥窗口中，根据实际需求，选择密钥的创建方式，填写相关信息，并单击【确定】。\n    ![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/create_ssh.png)\n\n    - **若创建方式选择 “创建新密钥对”，请输入密钥名称。**\n    - 若创建方式选择 “使用已有公钥”，请输入密钥名称和原有的公钥信息。（此法同 Mac 本地配置 SSH 一样）\n5. 在弹出的提示框中，单击【下载】，即可下载私钥。\n\n### 密钥绑定/解绑云服务器\n\n1. 登录 [云服务器控制台](https://console.cloud.tencent.com/cvm/)。\n2. 在左侧导航栏中，单击【[SSH 密钥](https://console.cloud.tencent.com/cvm/sshkey)】。\n3. 在 SSH 密钥管理页面，勾选需要绑定/解绑云服务器的 SSH 密钥，单击【绑定/解绑实例】。\n  ![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/bind_ssh.png)\n\n4. 在弹出的绑定/解绑实例窗口中，选择地域，勾选需绑定/解绑的云服务器，单击【确定】。\n\n### 修改 SSH 密钥名称/描述\n\n1. 登录 [云服务器控制台](https://console.cloud.tencent.com/cvm/)。\n2. 在左侧导航栏中，单击【[SSH 密钥](https://console.cloud.tencent.com/cvm/sshkey)】。\n3. 在 SSH 密钥管理页面，勾选需要修改的密钥，单击上方的【修改】。\n  ![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/change_ssh.png)\n4. 在弹出的修改密钥窗口中，输入新的密钥名称和密钥描述，单击【确定】。\n\n### 删除 SSH 密钥\n\n\u003e ! 若 SSH 密钥已关联云服务器或已关联自定义镜像，则该密钥不能删除。\n\n1. 登录 [云服务器控制台](https://console.cloud.tencent.com/cvm/)。\n2. 在左侧导航栏中，单击【[SSH 密钥](https://console.cloud.tencent.com/cvm/sshkey)】。\n3. 在 SSH 密钥管理页面，勾选所有需要删除的 SSH 密钥，单击【删除】。\n  ![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/terminal/5459959b9bedaa6d0da7d74a0379203d.png)\n4. 在弹出的删除密钥窗口中，单击【确定】。\n\n### 使用 SSH 登录 Linux 实例\n\n#### 执行以下命令，赋予私钥文件仅本人可读权限\n\n```sh\nchmod 400 \u003c下载的与云服务器关联的私钥的绝对路径\u003e\n```\n\n#### 使用密钥直接登录\n\n执行以下命令，进行远程登录。\n\n```sh\nssh -i \u003c下载的与云服务器关联的私钥的绝对路径\u003e \u003cusername\u003e@\u003chostname or IP address\u003e\n```\n\n- `username` 即为前提条件中获得的默认帐号。\n- `hostname or IP address` 为您的 Linux 实例公网 IP 或自定义域名。\n\n例如，执行 `ssh -i /Users/gakki/.ssh/mac_ssh_ubuntu.cer ubuntu@192.168.111.18` 命令，远程登录 Linux 云服务器。\n\n#### 通过 config 配置信息登录\n\n进入用户主目录下的 .ssh 目录，按照如下方式修改 config 文件。\n\n```json\nHost cvm    // 输入 cvm 实例的名称\nHostName 192.*.*.*   // 输入 cvm 实例的公网IP地址\nPort 22   // 输入端口号，默认为 22\nUser root   // 输入登录账号\nIdentityFile /Users/gakki/.ssh/mac_ssh_ubuntu.cer // 输入 .pem 私钥文件在本机的地址\n```\n\n保存 config 文件。\n\n运行命令连接至实例。\n\n示例如下：\n\n```sh\nssh cvm\n```\n\n## 参考资料\n\n- \u003chttps://deepzz.com/post/how-to-setup-ssh-config.html\u003e\n- \u003chttps://blog.csdn.net/myNameIssls/article/details/80516577\u003e\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null},"/vscode/vscode-snippets":{"title":"","content":"# VSCode 使用 Snippets 设置代码块\n\n\u003e 这条笔记创建于: 2022 年 10 月 24 日，星期一，16: 22。\n\n## Snippet 设置\n\n在 `Code \u003e Preferences` 中选择 `User Snippets` 在弹出框里选择对应的代码片段语言\n\n在打开的 `json` 中有示例代码：\n\n```json\n\"Print to console\": {\n    \"prefix\": \"log\",\n    \"body\": [\n        \"console.log('$1');\",\n        \"$2\"\n    ],\n    \"description\": \"Log output to console\"\n}\n```\n\n- `Print to console` 代码片段名称\n- `prefix` 插件前缀\n- `body` 插件内容可以是字符串，也可以为数组，若为数组每个元素都做为单独的一行插入。`body` 的内容支持 js 的转义字符，如 `\\n\\r` 等，我个人不建议用 `\\n` ，可另起一行给数组多插入一项，不然一行太多的话不容易观察代码块的格式。\n- `description` 插件描述\n\n## Snippet 语法\n\n### 占位符 $\n\n`log` 方法中 `$` 后面紧跟数字可指定代码片段触发落入编辑器之后的光标位置，光标位置按照从小到大排序。`log` 方法中当你输入 `log + TAB` 之后光标会默认落到 `log()` 的括号中（`$1` 的位置），如果此时没有手动移动光标位置，再次按 `TAB` 则光标会落到 `console.log()` 的第二行（ `$2` 的位置），当然，你也可以设置 `$3、$4` ... 等等。\n\n\u003e 需要注意的是：👇\n\n`$0` 用于设置最终光标的位置，设置了 `$0` 之后，再往后设置其他占位符则不会生效， `$0` 终止了 `TAB` 的光标跳转操作。\n\n### 占位内容的可选项\n\n```json\n\"方法注释\": {\n    \"prefix\": \"zs-Function\",\n    \"body\": [\n      \"/**\",\n      \" * @description description...\",\n      \" * @param { ${1|Boolean,Number,String,Object,Array,*|} } name description...\",\n      \" * @return { ${2|Boolean,Number,String,Object,Array,*|} } description...\",\n      \" */\",\n      \"$0\"\n    ],\n    \"description\": \"添加方法注释\"\n  }\n```\n\n上面是一个简单的方法注释代码块，占位符默认不带可选项，如果要设置占位内容的可选项，写法为 `${1|a,b,c}`，括号中的 `1` 对应的是按 `TAB` 之后的光标落点顺序， `abc` 为可选的项，用逗号隔开。所以上面的代码在输入 `zs + TAB` 后第一个光标会落在 `param name... {}` 的大括号中（`$1` 的位置），如下图可以看到设置的可选项。\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/b785edf7c7fc4424a17c2e307bd63357_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.webp)\n\n选择了参数类型之后，再次按 `TAB`，光标会自动落到返回参数类型处（`$2` 的位置）并弹出可选项。如下所示：\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/06d157ea12cb4f50a81382f1c899a681_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.webp)\n\n选择了第二个选项之后，再次按 `TAB` ，光标自动落到我们配置的 `$0` 处，也就是 `*/` 的下一行：\n\n![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/955b0a49efa54691ba0599e934e6813b_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.webp)\n\n\u003e 需要注意的是：👇\n\n- 如果可选择内容只有一个值的话可以写成 `${1:default}` 的格式。\n- 占位内容支持嵌套，比如 `${1:another ${2:placeholder}}`。\n\n### 变量\n\n使用 `$name` 或者 `${name:default}` 可以插入变量的值。如果未设置变量，则会插入其默认值或空字符串。当变量未知（未定义其名称）时，会将插入的变量名称转换为占位符。\n\n\u003e _**VSCode 中可以使用以下变量：**_\n\n_**1）文档相关：**_\n\n| 变量               | 变量含义                       |\n| ------------------ | ------------------------------ |\n| `TM_SELECTED_TEXT` | 当前选定的文本或空字符串       |\n| `TM_CURRENT_LINE`  | 当前行的内容                   |\n| `TM_CURRENT_WORD`  | 光标下的单词内容或空字符串     |\n| `TM_LINE_INDEX`    | 基于零索引的行号               |\n| `TM_LINE_NUMBER`   | 基于单索引的行号               |\n| `TM_FILENAME`      | 当前文档的文件名               |\n| `TM_FILENAME_BASE` | 当前文档没有扩展名的文件名     |\n| `TM_DIRECTORY`     | 当前文档的目录                 |\n| `TM_FILEPATH`      | 当前文档的完整文件路径         |\n| `CLIPBOARD`        | 剪贴板的内容                   |\n| `WORKSPACE_NAME`   | 已打开的工作空间或文件夹的名称 |\n\n_**2）当前日期和时间：**_\n\n| 变量                       | 变量含义                                        |\n| -------------------------- | ----------------------------------------------- |\n| `CURRENT_YEAR`             | 当前年份                                        |\n| `CURRENT_YEAR_SHORT`       | 当前年份的最后两位数                            |\n| `CURRENT_MONTH`            | 月份为两位数（例如'02'）                        |\n| `CURRENT_MONTH_NAME`       | 月份的全名（例如'June'）（中文语言对应六月）    |\n| `CURRENT_MONTH_NAME_SHORT` | 月份的简称（例如'Jun'）（中文语言对应是6月）    |\n| `CURRENT_DATE`             | 这个月的哪一天                                  |\n| `CURRENT_DAY_NAME`         | 当天是星期几（例如'星期一'）                    |\n| `CURRENT_DAY_NAME_SHORT`   | 当天是星期几的简称（例如'Mon'）（中文对应周一） |\n| `CURRENT_HOUR`             | 24小时时钟格式的当前小时                        |\n| `CURRENT_MINUTE`           | 当前分                                          |\n| `CURRENT_SECOND`           | 当前秒                                          |\n\n_**3）要插入行或块注释，请遵循当前语言：**_\n\n| 变量                  | 变量含义                    |\n| --------------------- | --------------------------- |\n| `BLOCK_COMMENT_START` | 输出：PHP /\\*或HTML格式\u003c!-- |\n| `BLOCK_COMMENT_END`   | 输出：PHP \\*/或HTML格式--\u003e  |\n| `LINE_COMMENT`        | 输出：PHP //或HTML格式      |\n\n举个栗子：\n\n\u003e ![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/2d253ba67a4b49dd92a171fb16f55f6c_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.webp)\n\n下面的代码块是常用的文件顶部添加作者和时间的块注释，其中用到了年（`CURRENT_YEAR`）月（`CURRENT_MONTH`）日（`$CURRENT_DATE`）的系统变量。\n\n```json\n\"作者和时间注释\": {\n    \"prefix\": \"zs-Author \u0026 Time\",\n    \"body\": [\n      \"/**\",\n      \" * Created by preference on $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE\",\n      \" */\",\n      \"$0\"\n    ],\n    \"description\": \"添加作者和时间注释\"\n}\n```\n\n再举个栗子：\n\n\u003e ![](https://raw.githubusercontent.com/chuenwei0129/my-picgo-repo/master/ts/2d253ba67a4b49dd92a171fb16f55f6c_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.webp)\n\n下面的代码块是新建 `.Vue` 文件的模板代码块，其中用到了当前文档没有扩展名的文件名（`TM_FILENAME_BASE`），默认把文件名填入 `name` 和 `class` 中。\n\n```json\n \"Vue模板\": {\n    \"prefix\": \"vue-template\",\n    \"body\": [\n      \"\u003ctemplate\u003e\",\n      \"  \u003csection class=\\\"$TM_FILENAME_BASE\\\"\u003e\",\n      \"    $1\",\n      \"  \u003c/section\u003e\",\n      \"\u003c/template\u003e\\n\",\n      \"\u003cscript\u003e\",\n      \"export default {\",\n      \" name: '$TM_FILENAME_BASE',\",\n      \"  data() {\",\n      \"    return {\\n\",\n      \"    }\",\n      \"  },\",\n      \"  components: {},\",\n      \"  watch: {},\",\n      \"  mounted() {},\",\n      \"  methods: {}\",\n      \"}\",\n      \"\u003c/script\u003e\\n\",\n      \"\u003cstyle scoped lang=\\\"less\\\"\u003e\\n\",\n      \"\u003c/style\u003e\",\n      \"$0\"\n    ],\n    \"description\": \"Vue模板\"\n  }\n```\n\n## snippet 生成工具\n\n\u003e [snippet-generator.app](https://snippet-generator.app/?description=\u0026tabtrigger=\u0026snippet=\u0026mode=vscode)\n","lastmodified":"2022-10-28T08:59:41.436467221Z","tags":null}}